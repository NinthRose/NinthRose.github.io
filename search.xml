<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>打满cpu/io/memory</title>
      <link href="/2023/03/22/soft/linux/full-cpu-io-memory/"/>
      <url>/2023/03/22/soft/linux/full-cpu-io-memory/</url>
      
        <content type="html"><![CDATA[<p>都涉及到<a href="http://c.biancheng.net/linux/dd.html">dd</a>命令</p><p>以及linux一些特殊文件</p><ul><li>&#x2F;dev&#x2F;null，也叫空设备，小名“无底洞”。任何写入它的数据都会被无情抛弃。</li><li>&#x2F;dev&#x2F;zero，可以产生连续不断的 null 的流（二进制的零流），用于向设备或文件写入 null 数据，一般用它来对设备或文件进行初始化。</li><li>&#x2F;dev&#x2F;urandom，它是“随机数设备”，它的本领就是可以生成理论意义上的随机数。</li></ul><p>dd demo：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向磁盘上写一个大文件, 来看写性能</span></span><br><span class="line">[root@roclinux ~]<span class="comment"># dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从磁盘上读取一个大文件, 来看读性能</span></span><br><span class="line">[root@roclinux ~]<span class="comment"># dd if=/root/1Gb.file bs=64k | dd of=/dev/null</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面命令生成了一个 1GB 的文件 1Gb.file，下面我们配合 time 命令，可以看出不同的块大小数据的写入时间，从而可以测算出到底块大小为多少时可以实现最佳的写入性能。</span></span><br><span class="line">[root@roclinux ~]<span class="comment"># time dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file</span></span><br><span class="line">[root@roclinux ~]<span class="comment"># time dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file</span></span><br><span class="line">[root@roclinux ~]<span class="comment"># time dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file</span></span><br><span class="line">[root@roclinux ~]<span class="comment"># time dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file</span></span><br></pre></td></tr></table></figure><h2 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打满4核cpu机器 lscpu</span><br><span class="line">for i in $(seq 1 4);do</span><br><span class="line">    dd if=/dev/zero of=/dev/null &amp;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h2><p>运行这个脚本，然后使用free命令查看MEM的使用情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 占用1GB内存1个小时. 注意需要可以mount的权限</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp/memory</span><br><span class="line">mount -t tmpfs -o size=1024M tmpfs /tmp/memory</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/tmp/memory/block</span><br><span class="line"><span class="built_in">sleep</span> 3600</span><br><span class="line"><span class="built_in">rm</span> /tmp/memory/block</span><br><span class="line">umount /tmp/memory</span><br><span class="line"><span class="built_in">rmdir</span> /tmp/memory</span><br></pre></td></tr></table></figure><h2 id="io"><a href="#io" class="headerlink" title="io"></a>io</h2><p>运行这个脚本，然后使用iostat命令查看IO的使用情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/urandom of=/burn bs=1M count=1024 iflag=fullblock</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>if指定输入的文件名，of指定输出的文件名，bs同时设置读写块的大小为1M，count是指仅拷贝1024个块，块大小等于bs指定的字节数。iflag&#x3D;fullblock表示堆积满block。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django 单元测试覆盖率</title>
      <link href="/2022/11/09/soft/python/django_test_coverage/"/>
      <url>/2022/11/09/soft/python/django_test_coverage/</url>
      
        <content type="html"><![CDATA[<h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install coverage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清楚缓存文件 .coverage</span></span><br><span class="line">coverage erase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试</span></span><br><span class="line">coverage run manage.py <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试报告</span></span><br><span class="line">coverage report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成html报告</span></span><br><span class="line">coverage html</span><br></pre></td></tr></table></figure><p>配置测试代码范围<code>.coveragerc</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[run]</span><br><span class="line">branch = True</span><br><span class="line">source = .</span><br><span class="line">omit =</span><br><span class="line">   manage.py</span><br><span class="line">   venv/*</span><br><span class="line">   models.py</span><br><span class="line"></span><br><span class="line">[report]</span><br><span class="line">show_missing = True</span><br><span class="line">skip_covered = True</span><br></pre></td></tr></table></figure><h2 id="test-demo"><a href="#test-demo" class="headerlink" title="test demo"></a>test demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXXTest</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_xxx</span>(<span class="params">self</span>):</span><br><span class="line">        self.client.get(url)</span><br><span class="line"></span><br><span class="line">        self.client.post(url,  data=&#123;&#125;, content_type=<span class="string">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存映射文件操作</title>
      <link href="/2022/10/27/soft/python/mmap/"/>
      <url>/2022/10/27/soft/python/mmap/</url>
      
        <content type="html"><![CDATA[<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mmap</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.json&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">with</span> mmap.mmap(file.fileno(), <span class="number">0</span>, access=mmap.ACCESS_WRITE) <span class="keyword">as</span> m:</span><br><span class="line">        m[<span class="number">3</span>:<span class="number">5</span>] = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tkinter(python GUI)</title>
      <link href="/2022/10/27/soft/python/tkinter/"/>
      <url>/2022/10/27/soft/python/tkinter/</url>
      
        <content type="html"><![CDATA[<h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><p>python GUI有很多，这里只学习使用最基础稳定的。</p><h2 id="sample-demo"><a href="#sample-demo" class="headerlink" title="sample demo"></a>sample demo</h2><p>Label 部分属性介绍</p><blockquote><ul><li>width 单位是字符宽度</li><li>wraplength 单位是px</li><li>justify 多行时生效，默认居中</li><li>font 字体</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#from tkinter import *</span></span><br><span class="line">root = Tk(className=<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">root.geometry(<span class="string">&#x27;1000x618&#x27;</span>)  <span class="comment"># 数字中间是小写字母</span></span><br><span class="line"></span><br><span class="line">title = Label(root, text=<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">text = StringVar()</span><br><span class="line">body = Label(root, textvariable=text, wraplength=width//<span class="number">2</span>, justify=<span class="string">&#x27;left&#x27;</span>, font=(<span class="string">&#x27;Helvetica&#x27;</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">title.pack()</span><br><span class="line">body.pack()</span><br><span class="line"></span><br><span class="line">info = <span class="string">&#x27;this is a line.\nthis is a new line. that is too long&#x27;</span></span><br><span class="line">text.<span class="built_in">set</span>(info)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h2 id="listbox-demo"><a href="#listbox-demo" class="headerlink" title="listbox demo"></a>listbox demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label = Label(root, text=<span class="string">&#x27;两个列表展示&#x27;</span>)</span><br><span class="line">listb  = Listbox(root)</span><br><span class="line">listb2 = Listbox(root)</span><br><span class="line"></span><br><span class="line">li     = [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;SQL&#x27;</span>,<span class="string">&#x27;java&#x27;</span>]</span><br><span class="line">movie  = [<span class="string">&#x27;CSS&#x27;</span>,<span class="string">&#x27;jQuery&#x27;</span>,<span class="string">&#x27;Bootstrap&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">    listb.insert(<span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> movie:</span><br><span class="line">    listb2.insert(<span class="string">&#x27;end&#x27;</span>, item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单布局</span></span><br><span class="line">label.pack()</span><br><span class="line">listb.pack()</span><br><span class="line">listb2.pack()</span><br></pre></td></tr></table></figure><blockquote><p>布局pack和grid不要一起食用，会引起不适～</p></blockquote><h2 id="login-for-grid-demo"><a href="#login-for-grid-demo" class="headerlink" title="login for grid demo"></a>login for grid demo</h2><p>grid 为表格布局</p><blockquote><ul><li>padx,pady 分别为单元格之间前后和上下的外间距</li><li>ipadx,ipady 分别为单元格之间前后和上下的内间距</li><li>columnspan,rowspan 分别为当前内容跨单元格数量，默认为1</li><li>sticky 为排列方式，默认为居中，在列内容长度不同时，表现比较长短不一。<ul><li>可设置的值为’n’, ‘ne’, ‘e’, ‘se’, ‘s’, ‘sw’, ‘w’, ‘nw’;</li><li>‘e’、‘w’、‘s’、’n’分别表示东西南北。</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> W, E</span><br><span class="line">login = Frame(root)</span><br><span class="line">Label(login, text=<span class="string">&#x27;用户名：&#x27;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>, sticky=W)</span><br><span class="line">Label(login, text=<span class="string">&#x27;密码：&#x27;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>, sticky=E)</span><br><span class="line"></span><br><span class="line">name = Entry(login)</span><br><span class="line">name.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">password = Entry(login, show=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">password.grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_checker</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Button(login, text=<span class="string">&#x27;登陆&#x27;</span>, command=login_checker).grid(row=<span class="number">2</span>, column=<span class="number">2</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">login.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = StringVar()</span><br><span class="line">box = Combobox(root, textvariable=var)</span><br><span class="line">box[<span class="string">&#x27;value&#x27;</span>] = [<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>]</span><br><span class="line"></span><br><span class="line">box.current(<span class="number">0</span>) <span class="comment"># 默认第一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取选择内容</span></span><br><span class="line">box.get()</span><br><span class="line">var.get()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ctypes调用动态库</title>
      <link href="/2022/10/11/soft/python/ctypes/"/>
      <url>/2022/10/11/soft/python/ctypes/</url>
      
        <content type="html"><![CDATA[<h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><p>ctypes是python的一个函数库，提供和C语言兼容的数据类型，可以直接调用动态链接库中的导出函数。<br>为了使用ctypes，必须依次完成以下步骤：</p><ul><li>加载动态链接库<ul><li>cdll</li><li>windll</li><li>oledll</li></ul></li><li>将python对象转换成ctypes所能识别的参数</li><li>使用ctypes所能识别的参数调用动态链接库中的函数</li></ul><blockquote><p>仅支持简单使用，详情请参考官方文档<a href="https://docs.python.org/zh-cn/3.7/library/ctypes.html">python doc</a></p></blockquote><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><table><thead><tr><th>ctypes 类型</th><th>C 类型</th><th>Python 类型</th></tr></thead><tbody><tr><td>c_bool</td><td>_Bool</td><td>bool (1)</td></tr><tr><td>c_char</td><td>char</td><td>单字符字节对象</td></tr><tr><td>c_wchar</td><td>wchar_t</td><td>单字符字符串</td></tr><tr><td>c_byte</td><td>char</td><td>整型</td></tr><tr><td>c_ubyte</td><td>unsigned char</td><td>整型</td></tr><tr><td>c_short</td><td>short</td><td>整型</td></tr><tr><td>c_ushort</td><td>unsigned short</td><td>整型</td></tr><tr><td>c_int</td><td>int</td><td>整型</td></tr><tr><td>c_uint</td><td>unsigned int</td><td>整型</td></tr><tr><td>c_long</td><td>long</td><td>整型</td></tr><tr><td>c_ulong</td><td>unsigned long</td><td>整型</td></tr><tr><td>c_longlong</td><td>__int64 或 long long</td><td>整型</td></tr><tr><td>c_ulonglong</td><td>unsigned __int64 或 unsigned long long</td><td>整型</td></tr><tr><td>c_size_t</td><td>size_t</td><td>整型</td></tr><tr><td>c_ssize_t</td><td>ssize_t 或 Py_ssize_t</td><td>整型</td></tr><tr><td>c_float</td><td>float</td><td>浮点数</td></tr><tr><td>c_double</td><td>double</td><td>浮点数</td></tr><tr><td>c_longdouble</td><td>long double</td><td>浮点数</td></tr><tr><td>c_char_p</td><td>char * (以 NUL 结尾)</td><td>字节串对象或 None</td></tr><tr><td>c_wchar_p</td><td>wchar_t * (以 NUL 结尾)</td><td>字符串或 None</td></tr><tr><td>c_void_p</td><td>void *</td><td>int 或 None</td></tr></tbody></table><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><p>cdll demo:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, ctypes</span><br><span class="line"><span class="keyword">from</span> platform <span class="keyword">import</span> system, architecture</span><br><span class="line">windows = <span class="string">&#x27;windows&#x27;</span> <span class="keyword">in</span> system.lower()</span><br><span class="line"><span class="comment"># working on architecture() in sys.byteorder</span></span><br><span class="line"><span class="keyword">if</span> windows:</span><br><span class="line">    api = ctypes.WinDLL(<span class="string">&#x27;lib.dll&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    api = ctypes.CDLL(<span class="string">&#x27;lib.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># attention long: longlong 8字节，int 4字节，long不稳定，尽量不要用</span></span><br><span class="line">long_effect = sizeof(c_long) != sizeof(c_int)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> long_effect:</span><br><span class="line">    c_long = c_longlong</span><br><span class="line">    c_ulong = c_ulonglong</span><br></pre></td></tr></table></figure><p>simple:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int add(int a, int b)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">demo_api = CDLL(<span class="string">&quot;lib.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">demo_api.add.argtypes = [c_int, c_int]      <span class="comment"># 定义输入类型</span></span><br><span class="line">demo_api.add.restype = c_int                <span class="comment"># 定义返回类型</span></span><br><span class="line">res = demo_api.add(c_int(<span class="number">5</span>), c_int(<span class="number">6</span>))      <span class="comment"># 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 11</span></span><br></pre></td></tr></table></figure><hr><p>pointer demo:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int create_handle(void *&amp;handle)</span></span><br><span class="line"><span class="comment"># int free_handle(void *handle, int i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">demo_api = CDLL(<span class="string">&quot;lib.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">demo_api.create_handle.argtypes = [POINTER(c_void_p)]</span><br><span class="line">demo_api.create_handle.restype = c_int</span><br><span class="line">req = c_void_p()</span><br><span class="line">res = demo_api.create_handle(byref(req))</span><br><span class="line"></span><br><span class="line">demo_api.free_handle.argtypes = [c_void_p, c_int]   <span class="comment"># 多个参数</span></span><br><span class="line">demo_api.free_handle.restype = c_int</span><br><span class="line">res = demo_api.free_handle(req, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><hr><p>struct demo:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># struct data_req</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     char c;</span></span><br><span class="line"><span class="comment">#     int list[256];</span></span><br><span class="line"><span class="comment">#     unsigned int i;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># int request(data_req *data)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">demo_api = CDLL(<span class="string">&quot;lib.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">REQ</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _pack_ = <span class="literal">True</span>  <span class="comment"># 1字节对齐</span></span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;c&quot;</span>, c_char),</span><br><span class="line">        (<span class="string">&quot;list&quot;</span>, c_int * <span class="number">256</span>),</span><br><span class="line">        (<span class="string">&quot;i&quot;</span>, c_uint),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">demo_api.request.argtypes = [REQ]</span><br><span class="line">demo_api.request.restype = c_int</span><br><span class="line">req = REQ(<span class="string">&#x27;1&#x27;</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">3</span>)</span><br><span class="line">res = demo_api.request(req)</span><br></pre></td></tr></table></figure><hr><p>callback demo:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># struct data_req</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     char c;</span></span><br><span class="line"><span class="comment">#     int list[256];</span></span><br><span class="line"><span class="comment">#     unsigned int i;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># typedef void (*callback)(int i, data_req *data)</span></span><br><span class="line"><span class="comment"># int func(callback c)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">demo_api = CDLL(<span class="string">&quot;lib.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">REQ</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;c&quot;</span>, c_char),</span><br><span class="line">        (<span class="string">&quot;list&quot;</span>, c_int * <span class="number">256</span>),</span><br><span class="line">        (<span class="string">&quot;i&quot;</span>, c_uint),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> windows:</span><br><span class="line">    callback_type = ctypes.WINFUNCTYPE(c_int, REQ)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    callback_type = ctypes.CFUNCTYPE(c_int, REQ)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">i, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, data)  <span class="comment"># print object&#x27;s type</span></span><br><span class="line">    <span class="built_in">print</span>(data.c)  <span class="comment"># print a char</span></span><br><span class="line">    <span class="built_in">print</span>(data.__dict__)  <span class="comment"># nothing</span></span><br><span class="line"></span><br><span class="line">demo_api.func.argtypes = [c_void_p]</span><br><span class="line">demo_api.func.restype = c_int</span><br><span class="line">callback_func = callback_type(print_log)</span><br><span class="line">res = demo_api.func(callback_func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可使用临时变量，垃圾回收之后，回调函数不可用</span></span><br><span class="line"><span class="comment"># res = demo_api.func(callback_type(print_log))</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> C/C++ </tag>
            
            <tag> ctypes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火烧云</title>
      <link href="/2022/10/09/tattle/evening-glow/"/>
      <url>/2022/10/09/tattle/evening-glow/</url>
      
        <content type="html"><![CDATA[<blockquote><p>子曰：“不逆诈，不亿不信，抑亦先觉者，是贤乎！”</p></blockquote><p>孔子说：“不揣测别人会欺诈，不臆测别人不诚实，但（在欺诈和不诚实发生时）又能及早发觉，这就是‘贤’了！”</p><div class="fj-gallery"><p><img src="/./img/weather/evening-glow.jpeg" alt="全景"><br><img src="/./img/weather/evening-glow0.jpeg" alt="snapshot"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weather </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>厨艺展示</title>
      <link href="/2022/10/01/tattle/cooking/"/>
      <url>/2022/10/01/tattle/cooking/</url>
      
        <content type="html"><![CDATA[<blockquote><p>火锅底料+牛奶+番茄酱<br>稍微多点油煎鸡蛋-&gt;荷包蛋</p></blockquote><div class="fj-gallery"><p><img src="/./img/cookie/noodles.jpeg" alt="10-1意大利面"><br><img src="/./img/cookie/noodles-egg.jpeg" alt="10-1意大利面上的鸡蛋"><br><img src="/./img/cookie/kao-ji-xiong-you.jpeg" alt="9-3鸡胸又"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uwsgi的使用配置</title>
      <link href="/2022/09/09/soft/python/uwsgi/"/>
      <url>/2022/09/09/soft/python/uwsgi/</url>
      
        <content type="html"><![CDATA[<h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><p>WSGI 全称是 Web Server Gateway Interface，也就是 Web 服务器网关接口，是一个web服务器（如uWSGI服务器）与web应用（如用Django或Flask框架写的程序）通信的一种规范。WSGI包含了很多自有协议，其中一个是uwsgi，它用于定义传输信息的类型。</p><p>uWSGI是一个Python Web服务器,它实现了WSGI协议、uwsgi、http等协议，常在部署Django或Flask开发的Python Web项目时使用，作为连接Nginx与应用程序之间的桥梁。</p><h2 id="WSGI-x2F-uwsgi-x2F-uWSGI"><a href="#WSGI-x2F-uwsgi-x2F-uWSGI" class="headerlink" title="WSGI&#x2F;uwsgi&#x2F;uWSGI"></a>WSGI&#x2F;uwsgi&#x2F;uWSGI</h2><ul><li>WSGI全名Web Server Gateway Interface，是一个Web服务器（如uWSGI服务器）与web应用（如用Django或Flask框架写的程序）通信的一种规范</li><li>uwsgi是WSGI通信规范中的一种自有协议</li><li>uWSGI是Python Web服务器，实现了WSGI通信规范和uwsgi协议</li></ul><h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><p>Nginx处理静态文件非常优秀，却不能直接与我们的Python Web应用程序进行交互。Django和Flask本身是Web框架，并不是Web服务器，它们自带的runserver和Werkzeug也仅仅用于开发测试环境，生产环境中处理并发的能力太弱。</p><blockquote><p>客户端 &lt;-&gt; Nginx &lt;-&gt; uWSGI &lt;-&gt; Python应用程序(Django, Flask)</p></blockquote><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p><code>pip install uwsgi</code> or <code>conda install -c conda-forge uwsgi</code></p><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><ul><li>start: <code>uwsgi --ini uwsgi.ini</code></li><li>stop: <code>uwsgi --stop $PID_FILE</code></li></ul><h2 id="配置文件demo"><a href="#配置文件demo" class="headerlink" title="配置文件demo"></a>配置文件demo</h2><p><code>%()</code>取值，配置文件如下uwsgi.ini:</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">uid</span>=&lt;user&gt; <span class="comment"># Ubuntu系统下默认用户名</span></span><br><span class="line"><span class="attr">gid</span>=&lt;group&gt; <span class="comment"># Ubuntu系统下默认用户组</span></span><br><span class="line"><span class="attr">project</span>=&lt;project_name&gt;  <span class="comment"># 项目名</span></span><br><span class="line"><span class="attr">base</span>=/home/&lt;user&gt; <span class="comment"># 项目根目录</span></span><br><span class="line"></span><br><span class="line"><span class="attr">home</span>=%(base)/%(project_venv_dir) <span class="comment"># 设置项目虚拟环境,Docker部署时不需要</span></span><br><span class="line"><span class="attr">chdir</span>=%(base)/%(project_dir) <span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="attr">module</span>=%(project).wsgi:application <span class="comment"># wsgi文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">master</span>=<span class="literal">True</span> <span class="comment"># 主进程</span></span><br><span class="line"><span class="attr">processes</span>=<span class="number">2</span> <span class="comment"># 同时进行的进程数，一般</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下uwsgi与nginx通信手段3选一即可，nginx配置要对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形</span></span><br><span class="line"><span class="comment"># Nginx配置中uwsgi_pass应指向同一socket文件</span></span><br><span class="line"><span class="comment"># socket=/run/uwsgi/%(project).sock</span></span><br><span class="line"><span class="comment"># 对应nginx中配置如下</span></span><br><span class="line"><span class="comment"># include /etc/nginx/uwsgi_params</span></span><br><span class="line"><span class="comment"># uwsgi_pass unix:/xxx/xxx/xxx.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选项2，使用TCP socket与nginx通信</span></span><br><span class="line"><span class="comment"># Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口</span></span><br><span class="line"><span class="comment"># socket=0.0.0.0:8000 或则 socket=:8000</span></span><br><span class="line">socket:9999</span><br><span class="line"><span class="comment"># 对应nginx中配置如下</span></span><br><span class="line"><span class="comment"># include /etc/nginx/uwsgi_params</span></span><br><span class="line"><span class="comment"># uwsgi_pass &lt;ip&gt;:&lt;port&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选项3，使用http协议与nginx通信</span></span><br><span class="line"><span class="comment"># Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口</span></span><br><span class="line"><span class="comment"># http=0.0.0.0:8000</span></span><br><span class="line"><span class="comment"># 对应nginx中配置如下</span></span><br><span class="line"><span class="comment"># include /etc/nginx/uwsgi_params</span></span><br><span class="line"><span class="comment"># uwsgi_pass http://&lt;ip&gt;:&lt;port&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># socket权限设置</span></span><br><span class="line"><span class="attr">chown-socket</span>=%(uid):www-data</span><br><span class="line"><span class="attr">chmod-socket</span>=<span class="number">664</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程文件</span></span><br><span class="line"><span class="attr">pidfile</span>=/tmp/%(project).pid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以后台守护进程运行，并将log日志存于temp文件夹。</span></span><br><span class="line"><span class="comment"># 没有时直接运行</span></span><br><span class="line"><span class="attr">daemonize</span>=/var/log/uwsgi/%(project).log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务停止时，自动移除unix socket和pid文件</span></span><br><span class="line"><span class="attr">vacuum</span>=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。</span></span><br><span class="line"><span class="attr">max-requests</span>=<span class="number">5000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃。</span></span><br><span class="line"><span class="attr">harakiri</span>=<span class="number">60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当一个请求被harakiri杀掉会输出一条日志</span></span><br><span class="line"><span class="attr">harakiri-verbose</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k</span></span><br><span class="line"><span class="attr">buffer-size</span>=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k</span></span><br><span class="line"><span class="attr">post-buffering</span>=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启内存使用情况报告</span></span><br><span class="line"><span class="attr">memory-report</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)</span></span><br><span class="line"><span class="attr">reload-mercy</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置工作进程使用虚拟内存超过多少MB就回收重启</span></span><br><span class="line"><span class="attr">reload-on-as</span>=<span class="number">1024</span></span><br></pre></td></tr></table></figure><h2 id="nginx-demo"><a href="#nginx-demo" class="headerlink" title="nginx demo"></a>nginx demo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8888:</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /app/project/dist;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /aaa/bbb &#123;</span><br><span class="line">        uwsgi_pass localhost:9999;</span><br><span class="line">        include /etc/nginx/uwsgi_params;</span><br><span class="line"></span><br><span class="line">        add_header backendIP $upstream_addr;</span><br><span class="line">        add_header backendCode $upstream_status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> uwsgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羽毛球拍选购指南</title>
      <link href="/2022/09/05/badminton/racket/"/>
      <url>/2022/09/05/badminton/racket/</url>
      
        <content type="html"><![CDATA[<h2 id="球拍长度"><a href="#球拍长度" class="headerlink" title="球拍长度"></a>球拍长度</h2><p>国际羽联规定665mm为羽毛球拍标准长度，最大长度不能超过680mm。</p><p>中国国内市场的羽毛球拍大多数为675mm。</p><p><strong>球拍越长，击球点越高，越容易进攻;<br>球拍越短，打球越灵活，更适合双打发挥威力。</strong></p><h2 id="球拍的重量"><a href="#球拍的重量" class="headerlink" title="球拍的重量"></a>球拍的重量</h2><p>重量这里主要以三大厂 (尤尼克斯，胜利，李宁)的球拍来讲解。<br>这里所说的重量是指空拍，也就是未穿线，未缠好手柄皮时的重量。</p><p><img src="/./img/badminton/racket-weight.jpeg" alt="重量介绍"></p><p>一般来说，球拍越重，进攻性越强，大于85g的拍子都属于进攻性拍子了。</p><h2 id="手柄的粗细"><a href="#手柄的粗细" class="headerlink" title="手柄的粗细"></a>手柄的粗细</h2><p>手柄的精细一般用G来表示，分为G0~G5，数字越大，拍柄就越细，越适合手小的球友。尤尼克斯(YY)和胜利的官方给出的数据有略微的差别:</p><p><img src="/./img/badminton/racket-thick.jpeg" alt="粗细介绍"></p><p><strong>李宁球拍一直是使用S来标注手柄精细的，数值越小，手柄越细。<br>S2对应G5，S3对应G4，S4对应G3。</strong></p><h2 id="中杆的软硬度"><a href="#中杆的软硬度" class="headerlink" title="中杆的软硬度"></a>中杆的软硬度</h2><p>中杆软硬度的话我们可以看球拍的说明书，里面会有写，也可以自己去店里亲身感受下。</p><p><img src="/./img/badminton/racket-soft.jpeg" alt="软硬度介绍"></p><p>球杆上配有一个进度条，越靠近S时，中杆越硬，反之，则软。<br>一般来说，<strong>中管软更适合防守型球员，进攻拍的中管普遍偏硬，软硬适中的拍子就是攻守兼备的拍子。</strong></p><p><strong>中杆越软，也就越弹，对于不会发力的或者腕力较小的初学者，软杆能把球打的更远。</strong><br>但是软杆会大大降低力的传导性和准确性，导致杀球不准，有一种泄力感。初学者建议选择中管较软的球拍。</p><h2 id="平衡点"><a href="#平衡点" class="headerlink" title="平衡点"></a>平衡点</h2><p>平衡点是指拍柄末端到平衡支点(重心)的距离。</p><p><img src="/./img/badminton/racket-balance.jpeg" alt="平衡点介绍"></p><h2 id="拍框的截面"><a href="#拍框的截面" class="headerlink" title="拍框的截面"></a>拍框的截面</h2><p>拍框的截面一般分为<strong>箱式框、破风框、混合框</strong>三种。</p><p><img src="/./img/badminton/racket-section.jpeg" alt="截面介绍"></p><p><strong>箱式框又叫盒式框</strong>，稳定性强，击球时拍框不易抖动变形，大多数进攻球拍使用它，同样的它的截面最大，所受阻力也是最大，影响挥拍速度。</p><p><strong>破风框</strong>的采用菱形截面，挥拍中受阻力小，挥速更快更容易击出快速、凶狠的回球。</p><p><strong>双面异型框</strong>是综合了以上两种框的优点，制作难度更大，对于球员的水平也要求更高，需分清正反拍。</p><p>别的地方我还了解到还有圆框上中下三种组合的不分正反的组合框。兼顾稳定性和破风性要求。</p><h2 id="拍头形状"><a href="#拍头形状" class="headerlink" title="拍头形状"></a>拍头形状</h2><p>从拍头形状区分有方形拍头和圆形拍头，对应的甜区也不相同。甜区是球拍的有效击球区，一般位于球拍中心稍靠上的位置。<br>甜区击球威力大，震动感小，控球性好。<br>方形拍头甜区大，容错率大，对新手更友好。圆形拍头相比方形拍头更小，一般为小拍面，甜区小，对击球技术有一定要求，新手容易打到拍框。</p><p><img src="/./img/badminton/racket-shape.jpeg" alt="形状介绍"></p><h2 id="拉线磅数"><a href="#拉线磅数" class="headerlink" title="拉线磅数"></a>拉线磅数</h2><p>羽毛球拍买过来基本是空拍，我们需要找专业的拉线师拉线，这就涉及到需要拉多少磅的问题了。<br><strong>磅数越高，球的落点就越准，但是费力。<br>磅数越低，落点有偏差，但是弹性好，相对小力。</strong><br>磅数不是拉得越高越好，选择适合自己的磅数才是最好的。<br>同样球拍上也都有标注最高拉线磅线，这个一般为质保磅数。</p><p><img src="/./img/badminton/racket-elasticity.jpeg" alt="磅数介绍"></p><p>初学者和力量小的人建议使用重量较轻拍弦面硬度适中的球拍，一般业余爱好者拉线22-23磅，业余中高级可拉至25磅以上，专业运动员的球拍接线30镑左右。</p>]]></content>
      
      
      <categories>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> badminton </tag>
            
            <tag> sport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羽毛球挥拍</title>
      <link href="/2022/08/29/badminton/note/"/>
      <url>/2022/08/29/badminton/note/</url>
      
        <content type="html"><![CDATA[<p>杀球的主要速度来源和高远球是完全一样的，不是靠手腕，也不是靠抡手臂甩拍子。 靠的是小臂的内旋发力。</p><h2 id="内旋外旋发力示范"><a href="#内旋外旋发力示范" class="headerlink" title="内旋外旋发力示范"></a>内旋外旋发力示范</h2><p>羽毛球里没有手腕发力，只有小臂内旋&#x2F;外旋发力。 正手击球主要使用内旋发力，反手则用外旋发力。</p><iframe width=350 height=500 src="/img/badminton/内旋外旋发力示范-1327637218560180224.mp4" frameborder=0 allowfullscreen></iframe><h2 id="内旋发力扣球动作"><a href="#内旋发力扣球动作" class="headerlink" title="内旋发力扣球动作"></a>内旋发力扣球动作</h2><p>首先是单纯使用内旋发力进行扣杀挥拍</p><iframe width=350 height=500 src="/img/badminton/羽毛球内旋发力扣球动作-1327641846353727488.mp4" frameborder=0 allowfullscreen></iframe><h2 id="利用手指力量扣球"><a href="#利用手指力量扣球" class="headerlink" title="利用手指力量扣球"></a>利用手指力量扣球</h2><p>把手指的力量加进去，手指的辅助力量是增加挥速的重要一环，想要用上手指的力量，就要求你握拍时手指不能一把抓地握紧，手心要留空，这样才能利用手指握力加速</p><iframe width=350 height=500 src="/img/badminton/羽毛球利用手指力量扣球-1327642619762171904.mp4" frameborder=0 allowfullscreen></iframe><h2 id="前臂内旋发力结合引拍抬肘的完整扣球挥拍"><a href="#前臂内旋发力结合引拍抬肘的完整扣球挥拍" class="headerlink" title="前臂内旋发力结合引拍抬肘的完整扣球挥拍"></a>前臂内旋发力结合引拍抬肘的完整扣球挥拍</h2><p>手指+小臂内旋构成了扣杀里面最核心的发力部分，这两个练好了你的杀球速度自然就会大幅度提升。</p><p>到这里你可能觉得这个挥速似乎还没有想象中那么快，那我只要加上引拍和抬肘，就能构成一个比较完整的上手扣球发力动作了，这几个速度一叠加，效果马上就有：</p><iframe width=350 height=500 src="/img/badminton/前臂内旋发力结合引拍抬肘的完整扣球挥拍-1327718654985945088.mp4" frameborder=0 allowfullscreen></iframe><p>上面还没有使用蹬腿和腰腹转身的力量，手部发力也只有6成（因为另一边要保持手机稳定）</p><p>最后是重杀和点杀的区别：上面我们主要讨论了核心的发力动作，而其实杀球还有很多其他环节用于增加挥拍速度，比如引拍，蹬地，转身，抬肘，亮肘，收腹等，这一整套动作做完了，发力最大化了，就是重杀，因为动作完整，耗时多，一般是在对方被迫挑高球时使用，自己有充足的时间移动到位完整发力。</p><p>而点杀就是只使用手指+小臂内旋，基本不依靠身体其他肌肉借力，所以点杀的速度是不如重杀的，但是点杀的动作很快，可以在对方重心尚未恢复时利用角度抢攻，常用于抓对方推球或者改变节奏。</p><h2 id="击球点"><a href="#击球点" class="headerlink" title="击球点"></a>击球点</h2><p>很多教练在教学的时候总是强调抢高点，导致学生打球的时候大臂是贴着耳朵的，这样会严重限制手臂内旋动作。所谓的抢高点是让你养成不要等球下落太低再回击的习惯（比如有的业余爱好者由于没有掌握正确的击球技术，喜欢等球落到脸部高度再用拍子去“推”，觉得这样才好瞄准），而不是让你一定要在头顶正上方去击球。(图1)</p><p>用一句口诀来说就是“两个一点钟”。第一个“一点钟”，手臂要在身体侧面一点钟位置(图2)，第二个“一点钟”，是指击球点在身体前方一点钟的位置。如图3：</p><div class="fj-gallery"><p><img src="/./img/badminton/wrong.jpeg" alt="错误的手臂位置"><br><img src="/./img/badminton/right.jpeg" alt="正确的手臂位置"><br><img src="/./img/badminton/bat.jpeg" alt="击球点"></p>          </div><blockquote><p><a href="https://www.zhihu.com/question/437090535/answer/1653112827">羽毛球杀球是靠手臂甩拍子还是手腕爆发？ - Xifelse的回答 - 知乎</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> badminton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学使用cherry-pick</title>
      <link href="/2022/08/27/soft/linux/cherry-pick/"/>
      <url>/2022/08/27/soft/linux/cherry-pick/</url>
      
        <content type="html"><![CDATA[<p>无意中发现一篇文章<a href="https://devblogs.microsoft.com/oldnewthing/20180312-00/?p=98215">不要再使用cherry-pick啦</a>。看完之后，发现还是<code>cherry-pick</code>真香，个人看法如下：</p><p>一般使用<code>cherry-pick</code>是在提交代码前发现代码落后时，整理个人开发分支代码，此时解决发现的冲突确实对后续的开发埋下雷，但这种情况特别少见。</p><p>像以小组合作开发的团队，其实这种情况很容易处理，开发小组组件涉及人员少，日常交流多。怎么合理的解决这部分冲突大家很容易达成共鸣；还可以使用下面这种更专业的方式。</p><p>开源代码的维护和开发一般涉及到很多线上开发者的情况，此时没有办法开会或者沟通所有相关人员。遇到这种情况，读过<strong>程序员的自我修养</strong>的开发者一般也不会轻易解决冲突就提合并请求，而是会针对冲突部分代码影响到的内容做审查，如果非要解决冲突才可以，就针对性单独提交一个相当于合并的节点；而不是将解决冲突藏在另一个开发节点中。</p><hr><blockquote><p><code>git commit --amend --reset-author</code>则将作者重置为您自己或您指定的任何人。您也可以通过这种方式在此时指定作者日期。也可在<code>cherry-pick</code>之后变更操作信息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soft </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学之美</title>
      <link href="/2022/08/26/math/math/"/>
      <url>/2022/08/26/math/math/</url>
      
        <content type="html"><![CDATA[<h2 id="无字证明一些简单的高中数学公式"><a href="#无字证明一些简单的高中数学公式" class="headerlink" title="无字证明一些简单的高中数学公式"></a>无字证明一些简单的高中数学公式</h2><p>真是妙蛙种子吃着妙脆角妙进了米奇妙妙屋 妙到家了</p><p><img src="/./img/math/math-1.jpeg" alt="1"><br><img src="/./img/math/math-2.jpeg" alt="2"><br><img src="/./img/math/math-3.jpeg" alt="3"><br><img src="/./img/math/math-4.jpeg" alt="4"><br><img src="/./img/math/math-5.jpeg" alt="5"><br><img src="/./img/math/math-6.jpeg" alt="6"><br><img src="/./img/math/math-7.jpeg" alt="7"><br><img src="/./img/math/math-8.jpeg" alt="8"><br><img src="/./img/math/math-9.jpeg" alt="9"><br><img src="/./img/math/math-10.jpeg" alt="10"><br><img src="/./img/math/math-11.jpeg" alt="11"><br><img src="/./img/math/math-12.jpeg" alt="12"></p>]]></content>
      
      
      <categories>
          
          <category> 科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私厨</title>
      <link href="/2022/08/16/tattle/zheng-dou-fu/"/>
      <url>/2022/08/16/tattle/zheng-dou-fu/</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="/./img/cookie/zheng-dou-fu.jpeg" alt="8-16蒸豆腐"><br><img src="/./img/cookie/coke-chicken.jpeg" alt="8-24可乐鸡翅"><br><img src="/./img/cookie/hong-shao-you.jpeg" alt="8-27红烧又"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被骗炉小哥</title>
      <link href="/2022/08/15/restaurant/MRHot%E2%80%98sGrill-md/"/>
      <url>/2022/08/15/restaurant/MRHot%E2%80%98sGrill-md/</url>
      
        <content type="html"><![CDATA[<p>又来到了最喜欢吃的烤又店啦～炉小哥烤又店～</p><blockquote><p>上上次会员日送了五折券，上次周末去说不能用，这次说只能中午用，太坑啦！！！强烈反对，再也不积极去了。恶心的促销政策，每次都不说清楚。</p></blockquote><ul><li>炸土豆<ul><li>超级好吃，外面特别脆</li></ul></li><li>炒饭<ul><li>里面的脆香米让口感特别好，不过酱多，味道有些重，下次让他们少放点料。</li></ul></li><li>甜点<ul><li>积分兑换新品试吃。冰淇凌还可以，下面的面包不太好吃</li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/restaurant/luxiaoge-1.jpeg" alt="挑选又又"><br><img src="/./img/restaurant/luxiaoge-2.jpeg" alt="饮尼奥"><br><img src="/./img/restaurant/luxiaoge-3.jpeg" alt="鸭血"><br><img src="/./img/restaurant/luxiaoge-4.jpeg" alt="炸土豆"><br><img src="/./img/restaurant/luxiaoge-5.jpeg" alt="烤好的又又"><br><img src="/./img/restaurant/luxiaoge-6.jpeg" alt="经典炒饭"><br><img src="/./img/restaurant/luxiaoge-7.jpeg" alt="甜点"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 美食推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restaurant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全自动猫砂盆&amp;烘干箱</title>
      <link href="/2022/08/09/tattle/mao-sha-pen/"/>
      <url>/2022/08/09/tattle/mao-sha-pen/</url>
      
        <content type="html"><![CDATA[<h2 id="全自动猫砂盆"><a href="#全自动猫砂盆" class="headerlink" title="全自动猫砂盆"></a>全自动猫砂盆</h2><p>说到好物推荐，猫砂盆不得不提。</p><p>养猫的话都知道，每天铲屎真的很累，尤其是某天不想动的时候。真的就是不想动。</p><p>有了这玩意之后，最多一个星期需要清理一次，真的好爽！！！</p><p><strong>还有自动除臭功能，也不再熏鼻子了</strong></p><hr><h3 id="接下来就是吐槽"><a href="#接下来就是吐槽" class="headerlink" title="接下来就是吐槽"></a>接下来就是吐槽</h3><ol><li>不建议使用<code>膨润土猫砂</code>！！！不管是全自动猫砂盆还是普通猫砂盆<ul><li>除了猫咪爱用，一点好处都没有，又臭又难清理，太多碎砂到处都是。</li></ul></li><li>不建议使用<code>全自动饮水机</code><ul><li>那个吸附过滤水的功能真的很垃圾。水容易黏糊糊的，猫咪只有头一两天爱喝</li></ul></li></ol><h2 id="猫用烘干箱"><a href="#猫用烘干箱" class="headerlink" title="猫用烘干箱"></a>猫用烘干箱</h2><p>免去使用吹风机的久累，但是吹得慢，表面毛发很容易吹干。<br>贴身还是有点干，所以要吹满一个半小时，才能吹透。</p><blockquote><p>带去油一次洗澡至少110。洗澡其实很快，五分钟去油，十分钟洗护。 总的来说还是解放双手，省钱神器。</p></blockquote><p>使用前：</p><div class="fj-gallery"><p><img src="/./img/cat/dryer-1.jpeg"><br><img src="/./img/cat/dryer-2.jpeg"></p>          </div><p>烘干中：</p><div class="fj-gallery"><p><img src="/./img/cat/drying-1.jpeg"><br><img src="/./img/cat/drying-2.jpeg"><br><img src="/./img/cat/drying-3.jpeg"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 好物推荐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洗碗机</title>
      <link href="/2022/08/09/tattle/xi-wan-ji/"/>
      <url>/2022/08/09/tattle/xi-wan-ji/</url>
      
        <content type="html"><![CDATA[<ol><li>款式<ul><li>租房，所以选择台式</li></ul></li><li>使用<ul><li>只有三个按键，很方便</li></ul></li><li>效果<ul><li>洗得很干净</li></ul></li><li>烘干<ul><li>好像没有，但是洗完之后打开发现挺干的</li></ul></li><li>成本<ul><li>算了一下，平均洗一次需要不到一块钱的成本</li><li>专用洗碗盐&#x2F;块，不能使用洗洁精，清洁原理不同。</li></ul></li></ol><ul><li>注意事项（大部分都是）<ul><li>每次放进去之前需要冲一下，不能有大块食物残渣，不然下水很小会堵（有高端洗碗机不需要此操作，还能洗锅）</li></ul></li></ul><blockquote><p><strong>感受上来说，解放双手！</strong><br>吃完饭，收拾一下碗筷，放进去，按键，洗手完事，下次用直接去里面拿</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 好物推荐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我家的书架长🐱了</title>
      <link href="/2022/07/18/tattle/2022-7-18/"/>
      <url>/2022/07/18/tattle/2022-7-18/</url>
      
        <content type="html"><![CDATA[<p>搬完家，刚收拾好书架你就上去了。调皮</p><div class="fj-gallery"><p><img src="/./img/cat/shelf-0.jpeg" alt="长🐱的书架ing"><br><img src="/./img/cat/shelf.jpeg" alt="长了🐱的书架"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx安装和使用</title>
      <link href="/2022/06/22/soft/linux/nginx/"/>
      <url>/2022/06/22/soft/linux/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><code>sudo apt-get install nginx</code><ul><li>配置文件<code>/etc/nginx/nginx.conf</code><ul><li><code>include /etc/nginx/conf.d/*.conf</code></li></ul></li></ul></li><li><code>sudo /etc/init.d/nginx start</code></li><li><code>nginx -s reload</code></li><li><code>curl http://localhost/</code>或者<code>sudo nginx -t</code> # test</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>blog.conf:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # http socket</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  luckyu.com.cn;</span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line">    # access_log /var/log/nginx/blog.access.log main;</span><br><span class="line"></span><br><span class="line">    ssl_certificate   blog/luckyu.com.cn_bundle.pem;</span><br><span class="line">    ssl_certificate_key  blog/luckyu.com.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    # ssl_ciphers ....;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        # 接口映射 映射本地服务接口</span><br><span class="line">        # uwsgi_pass unix:/tmp/uwsgi.sock;</span><br><span class="line">        # proxy_pass http://localhost:8000;</span><br><span class="line">        # 配置静态资源路径</span><br><span class="line">        root /home/baiker/hexo/blog/public;</span><br><span class="line">        index index.html;</span><br><span class="line">        rewrite ^/(.*)$ /$1 break;</span><br><span class="line">    &#125;</span><br><span class="line">    # 端口映射 重定向评论接口</span><br><span class="line">    location /comments &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass unix:/tmp/uwsgi.sock;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.luckyu.com.cn;</span><br><span class="line">    # 重定向</span><br><span class="line">    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用公共配置"><a href="#使用公共配置" class="headerlink" title="使用公共配置"></a>使用公共配置</h2><p><code>include conf.d/proxy.inc;</code></p><p>proxy.inc:(demo)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">expires off;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Host $host:$server_port;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">proxy_connect_timeout 7d;</span><br><span class="line">proxy_send_timeout 7d;</span><br><span class="line">proxy_read_timeout 7d;</span><br><span class="line">add_header backendIP $upstream_addr;</span><br><span class="line">add_header backendCode $upstream_status;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soft </tag>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小玖太懒，影评尚未更新，请打赏激励他！</title>
      <link href="/2022/06/18/movies/index/"/>
      <url>/2022/06/18/movies/index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> movies </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当前博客网站所用壁纸</title>
      <link href="/2022/06/18/images/bing/"/>
      <url>/2022/06/18/images/bing/</url>
      
        <content type="html"><![CDATA[<p>使用bing每日壁纸，每天发现一个新地方。</p><p>“必应壁纸”包含必应主页上特别推荐的一批来自世界各地的精美图片。您不仅每天都会在桌面上看到一个新图像，而且还可以浏览图像并了解其来源。</p><div class="fj-gallery"><p><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220728.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220727.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220726.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220725.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220724.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220723.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220722.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220721.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220720.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220719.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220718.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220717.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220716.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220715.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220714.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220713.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220712.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220711.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220710.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220709.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220708.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220707.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220706.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220705.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220704.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220703.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220702.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220701.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220628.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220627.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220626.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220625.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220624.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220623.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220622.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220621.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220620.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220619.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220618.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220617.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220616.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220615.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220614.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220613.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220612.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220611.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220610.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220609.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220608.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220607.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220606.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220605.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220604.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220603.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220602.jpg" alt="bing每日壁纸"><br><img src="https://tupian.sioe.cn/b/bing-home-image/pic/20220601.jpg" alt="bing每日壁纸"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> images </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小玖太懒，音乐推荐尚未更新，请打赏激励他！</title>
      <link href="/2022/06/18/music/index/"/>
      <url>/2022/06/18/music/index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> musics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps到货！</title>
      <link href="/2022/05/23/tattle/2022-5-23/"/>
      <url>/2022/05/23/tattle/2022-5-23/</url>
      
        <content type="html"><![CDATA[<p>最近周末无聊死了，期待能很好玩吧。有没有有经验的P友，推荐点高质量的游戏吧～</p><div class="fj-gallery"><p><img src="/./img/ps.jpeg" alt="ps"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unix编程艺术</title>
      <link href="/2022/05/07/books/the-art-of-unix-programming/"/>
      <url>/2022/05/07/books/the-art-of-unix-programming/</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>知识和专能差别巨大，凭借知识可以推断出该做什么，而专能能让你在无意之间条件反射的把事情做好。</p><p>Advanced Programming in the Unix Environment [Stevens92] 是探究Unix API的经典著作</p><p>The Practice of Programming [Kernighan-Pike99] 是每个程序员都应该看的书</p><p>Zen Flesh, Zen Bones [Reps-Senzaki] 禅宗</p><p>用错误的方式解决正确的问题总比用正确的方法解决错误的问题。　－－Doug Mcllroy</p><h1 id="哲学"><a href="#哲学" class="headerlink" title="哲学"></a>哲学</h1><p>Unix 仍然是唯一一个在不同种类的计算机，众多厂商，各种专用硬件上提供了一个一致的，文档齐全的应用程序接口的操作系统。</p><ul><li>每个程序就做好一件事。如果有新任务，就重新开始，不要在原程序中加入新功能而搞得很复杂。</li><li>假定每个程序的输出都会成为另一个程序的输入，哪怕那个程序还是未知的。输出中不要有无关的信息干扰。避免使用严格的分栏格式和二进制格式输入。不要坚持使用交互式输入。</li><li>尽可能早地将设计和编译的软件投入试用，哪怕是操作系统也不例外，理想情况下，应该是在几星期内。对拙劣的代码别犹豫，扔掉重写。</li><li>优先使用工具而不是拙劣的帮助来减轻编程任务的负担。工欲善其事必先利其器。</li></ul><p>Unix哲学：一个程序只做一件事，并做好。程序要能协作，程序要能处理文本流。这是最通用的接口。</p><p>Rob Pike认为Unix的哲学：</p><ul><li>你无法断定程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急于胡乱找个地方修改代码，除非你已经证实那里就是瓶颈所在。</li><li>估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。</li><li>花哨的算法在n很小的时候通常都很慢，而n通常很小。花哨算法的常数复杂度很大。除非你确定n总是很大，否则不要用花哨算法（即使n很大，也优先考虑原则2）</li><li>花哨算法比简单算法更容易出bug，更难实现。尽量使用简单的算法配合简单的数据结构。<ul><li>拿不准就穷举</li></ul></li><li>数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织得井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。</li><li>没有原则6</li></ul><h2 id="Unix哲学基础"><a href="#Unix哲学基础" class="headerlink" title="Unix哲学基础"></a>Unix哲学基础</h2><p>整体上来说：</p><ul><li>模块原则：使用间接地接口拼合简单的部件<ul><li>降低整体复杂度</li></ul></li><li>清晰原则：清晰胜于机巧<ul><li>优雅而清晰的代码不仅不容易崩溃，更易于让后来的修改者立刻理解</li><li>永远不要吃力的解读一段晦涩的代码三次</li></ul></li><li>组合原则：设计时考虑拼接组合<ul><li>根据不同的需求粘合使用不同的接口</li></ul></li><li>分离原则：策略同机制分离，接口同引擎分离<ul><li>探索新策略时不需要打破机制</li></ul></li><li>简洁原则：设计要简洁，复杂度能低就低<ul><li>设计能力大大超出实现和排错能力，结果便是代价高昂的废品</li><li>以简洁为美</li></ul></li><li>吝啬原则：除非却无他法，不要编写庞大的程序</li><li>透明性原则：设计要可见，以便审查和调试</li><li>健壮原则：健壮源于透明和简洁<ul><li>透明化和简洁化，程序内部逻辑便于理解，更健壮</li></ul></li><li>表示原则：把知识叠入数据以求逻辑质朴而健壮</li><li>通俗原则：接口设计避免标新立异<ul><li>最少惊奇原则</li><li>能够缓和学习曲线</li><li>最小立异原则另一面，要避免表象相似，实际却略有不同</li></ul></li><li>缄默原则：如果一个程序没什么好说的，就沉默<ul><li>一切从简，沉默是金</li><li>设计良好的程序将用户的注意力视为有限的宝贵资源</li></ul></li><li>补救原则：出现异常时，马上退出并给出足够错误信息<ul><li>宽容的收，谨慎的发。</li><li>考虑宽容性，而不是纵容的实现来补救标准不足</li></ul></li><li>经济原则：宁花机器一分，不花程序员一秒</li><li>生成原则：避免手工hack，尽量编写程序去生成程序</li><li>优化原则：雕琢前先要有原型，跑之前先学会走<ul><li>过早优化是万恶之源</li><li>匆忙优化可能是比乱加功能更损害设计的错误</li><li>过早优化实际上会妨碍全局优化</li><li>优化之前先保证能用</li></ul></li><li>多样原则：决不相信所谓的“不二法门”的断言</li><li>扩展原则：设计着眼于未来，未来总比预想来的要快<ul><li>要为数据格式和代码留下扩展空间，改变的同时保证兼容性</li></ul></li></ul><p>KISS 原则<br>Keep It Simple, Stupid!</p><h2 id="应用Unix哲学"><a href="#应用Unix哲学" class="headerlink" title="应用Unix哲学"></a>应用Unix哲学</h2><ul><li>只要可行，一切都应该做成与来源和目标无关的过滤器</li><li>数据流应尽可能文本化<ul><li>可以使用标准工具来查看和过滤</li></ul></li><li>数据库部署和应用协议应尽可能文本化<ul><li>让人可以阅读和编辑</li></ul></li><li>复杂的前段和后端应该泾渭分明</li><li>如果可能，在Ｃ编写之前，先用解释性语言搭建原型</li><li>当且仅当只使用一门语言编程会提高程序复杂度时，混用语言编程才比单一语言编程来得好</li><li>宽收严发</li><li>过滤时，不需要丢弃的信息决不丢</li><li>小就是美。在确保完成任务的基础上，程序功能尽可能的少</li></ul><h2 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h2><p>看到该做的就去做</p><h1 id="历史－－双流记"><a href="#历史－－双流记" class="headerlink" title="历史－－双流记"></a>历史－－双流记</h1><p>前事不忘，后事之师。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令行与shell脚本编程大全</title>
      <link href="/2022/03/12/books/linux-command-line-and-shell-script/"/>
      <url>/2022/03/12/books/linux-command-line-and-shell-script/</url>
      
        <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul><li>Ctrl Shift N 创建新shell会话(N-&gt;T:当前窗口)</li><li>Ctrl Shift W 关闭当前会话(W-&gt;Q:当前窗口)</li><li>Ctrl +&#x2F;- 改变窗口显示字号</li><li>Ctrl 0 恢复默认字号</li><li>Ctrl Shift C&#x2F;V 复制粘贴</li><li>Ctrl Shift F 在当前窗口搜索文本内容(F-&gt;G:向后、F-&gt;H:向前)</li><li>Alt number 切换当前窗口内的活动标签(Ctrl PageDown&#x2F;PageUp切换标签，+Shift移动当前标签)</li></ul><h1 id="基本bash"><a href="#基本bash" class="headerlink" title="基本bash"></a>基本bash</h1><h2 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h2><ul><li>ls -F # 区分目录和文件</li><li>ls -R # 递归选项</li><li>ls -l # 显示长列表<ul><li>文件类型：目录d、文件-、字符型文件c、块设备b</li><li>文件权限</li><li>硬链接数目</li><li>属主用户名</li><li>属组组名</li><li>文件大小</li><li>文件上次修改时间（并非是访问时间，若要查看访问时间：–time&#x3D;atime）</li><li>文件名或者目录名</li></ul></li><li>ls * # 支持过滤功能</li><li>ls -i # 文件或目录的inode编号是唯一标示的数字</li></ul><h2 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><ul><li>touch file # 创建文件命令</li><li>touch -a file # 改变访问时间</li></ul><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><ul><li>cp -i source target # 是否覆盖已有文件</li><li>cp命令支持通配符</li><li>cp -R递归复制</li></ul><h3 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h3><p>符号链接与硬链接</p><ul><li>ln -s file target # 符号链接</li><li>ln file target # 硬链接会创建单独的虚拟文件，其实是同一个文件<br>不同存储媒体的文件之间的链接应使用符号链接</li></ul><h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><ul><li><code>mv old_file new_file</code> # 重命名或者移动文件，inode编号不变</li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ul><li><code>rm -i file</code> # 是否确认删除</li><li><code>rm -r directory</code> # 递归删除</li><li><code>rm -f file</code> # 免受提示符的打扰</li></ul><h2 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><ul><li><code>mkdir directory</code> # 创建文件夹</li><li><code>mkdir -p directory</code> # 创建缺失的父目录</li></ul><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><ul><li><p><code>rmdir directory</code> # 删除空目录</p></li><li><p>tree # 美观的展示目录、子目录以及文件</p></li></ul><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><h3 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h3><ul><li>file file # 探测文件</li></ul><h3 id="查看整个文件"><a href="#查看整个文件" class="headerlink" title="查看整个文件"></a>查看整个文件</h3><ul><li><p>cat file # 显示文本内容</p></li><li><p>cat -n file # 显示行号</p></li><li><p>cat -b file # 只给有文本的内容显示行号</p></li><li><p>cat -T file # 不显示制表符。^I来替换其中的制表符</p></li><li><p>more file # 查看文件</p></li><li><p>less file # 功能更强大的查看文件</p></li></ul><h3 id="查看部分文件"><a href="#查看部分文件" class="headerlink" title="查看部分文件"></a>查看部分文件</h3><ul><li><p>tail file # 默认显示最后十行文件</p></li><li><p>tail -n 2 file # 显示最后n行文件</p></li><li><p>tail -f file # 保持活跃状态，可用于实时检测</p></li><li><p>head file # 显示开头内容</p></li><li><p>head -5 file # 显示n行开头内容</p></li></ul><h1 id="更多bash"><a href="#更多bash" class="headerlink" title="更多bash"></a>更多bash</h1><h2 id="检测程序"><a href="#检测程序" class="headerlink" title="检测程序"></a>检测程序</h2><h3 id="探查进程"><a href="#探查进程" class="headerlink" title="探查进程"></a>探查进程</h3><p>UNIX 风格的参数：</p><ul><li>ps # 显示当前控制台下属于当前用户的进程<ul><li>pid：进程ID</li><li>tty：teletypewriter</li><li>time：已用cpu时间</li><li>cmd：命令</li></ul></li><li>ps -ef # 显示所有进程</li><li>ps -l # 长格式输出<ul><li>F:内核分配给进程的系统标记</li><li>S:进程的状态<ul><li>O 正在运行</li><li>S 休眠</li><li>R 可运行，等待运行</li><li>Z 僵化，进程已结束但父进程已不存在</li><li>T 停止</li></ul></li><li>o # 指定输出格式：-o pid,ppid,ni,cmd…</li></ul></li><li>PRI # 进程的优先级，数字越大优先级越低</li><li>NI # 谦让度值用来参与决定优先级</li><li>ADDR # 进程的内存地址</li><li>SZ # 加入进程被换出，所需要的交换空间大小</li><li>WCHAN # 进程休眠的内核函数地址</li></ul><p>BSD 风格的参数不同之处：</p><ul><li>VSZ # 进程在内存中的大小，单位KB</li><li>RSS # 进程在未换出时占用的物理内存</li><li>STAT # 代表当前进程状态的双字符状态码<ul><li>第一个字符和UNIX风格的S列相同</li><li>&lt; 该进程运行在高优先级上</li><li>N 该进程运行在低优先级上</li><li>L 该进程有页面锁定在内存中</li><li>s 该进程是控制进程</li><li>l 该进程是多线程的</li><li><ul><li>该进程运行在前台</li></ul></li></ul></li></ul><p>GUN 长参数</p><ul><li>ps –forest # 显示进程的层级信息，并用ASCII绘制出可爱的图表</li></ul><h3 id="实时检测进程"><a href="#实时检测进程" class="headerlink" title="实时检测进程"></a>实时检测进程</h3><ul><li>top<ul><li><p>第一行显示当前时间、系统的运行时间、登录的用户数、系统的平均负载</p><ul><li>平均负载有三个值，最近1分钟、最近5分钟、最近15分钟</li><li>系统长时间处于高负载，系统可能会有问题（大于2）</li></ul></li><li><p>第二行进程概要信息</p></li><li><p>第三行显示CPU概要信息</p></li><li><p>系统物理内存状态</p></li><li><p>系统交换空间内存状态</p></li><li><p>PID 进程的ID</p></li><li><p>USER 进程属主的名字</p></li><li><p>PR 进程的优先级</p></li><li><p>NI 进程的谦让值度</p></li><li><p>VIRT 进程占用的虚拟内存总量</p></li><li><p>RES 进程占用的物理内存总量</p></li><li><p>SHR 进程和其他进程共享的内存总量</p></li><li><p>S 进程的状态</p><ul><li>D 可中断的休眠状态</li><li>R 在运行状态</li><li>S 休眠状态</li><li>T 跟踪或者停止状态</li><li>Z 僵化状态</li></ul></li><li><p>%CPU 进程使用的CPU时间比例</p></li><li><p>%MEM 进程使用的内存占可用内存的比例</p></li><li><p>TIME+ 自进程启动到目前为止的CPU时间总量</p></li><li><p>COMMAND 进程所对应的命令行名称，启动的程序名</p></li><li><p>默认使用%CPU值对进程排序</p></li><li><p>键入f选择对输出排序的字段</p></li><li><p>键入d修改轮询间隔</p></li><li><p>键入q退出top</p></li></ul></li></ul><h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h3><p>linux 进程信号</p><ul><li><p>信号 名称 描述</p></li><li><p>1 HUP 挂起</p></li><li><p>2 INT 中断</p></li><li><p>3 QUIT 结束运行</p></li><li><p>9 KILL 无条件终止</p></li><li><p>11 SEGV 段错误</p></li><li><p>15 TERM 尽可能终止</p></li><li><p>17 STOP 无条件停止运行，但不终止</p></li><li><p>18 TSTP 停止或者暂停，但继续在后台运行</p></li><li><p>19 CONT 在STOP或TSTP之后恢复执行</p></li><li><p>kill pid # 给列出的全部PID发送TERM信号</p></li><li><p>kill -s 信号名称 pid # kill -s HUP 4444</p></li><li><p>killall http* # killall 支持通过进程名来结束进程，还支持通配符，上述命令结束了http开头的进程</p></li></ul><h2 id="检测磁盘空间"><a href="#检测磁盘空间" class="headerlink" title="检测磁盘空间"></a>检测磁盘空间</h2><h3 id="挂载存储媒体"><a href="#挂载存储媒体" class="headerlink" title="挂载存储媒体"></a>挂载存储媒体</h3><ul><li>mount # 输出当前系统挂载的设备列表<ul><li>设备文件名</li><li>挂载在虚拟目录的挂载点</li><li>文件系统类型</li><li>已挂载媒体的访问状态</li></ul></li><li>mount # P74</li><li>unmount # P75</li></ul><h3 id="查看磁盘使用情况"><a href="#查看磁盘使用情况" class="headerlink" title="查看磁盘使用情况"></a>查看磁盘使用情况</h3><ul><li>df # 查看已挂载磁盘的使用情况</li><li>df -h # 用户易读方式显示</li></ul><h3 id="显示特定目录使用情况"><a href="#显示特定目录使用情况" class="headerlink" title="显示特定目录使用情况"></a>显示特定目录使用情况</h3><ul><li>du # 显示特定目录的磁盘使用情况，左边数值为占用的磁盘块数</li><li>du -c # 显示已列出文件总大小</li><li>du -h # 按照用户易读方式输出</li><li>du -s # 显示每个输出参数的统计</li></ul><h2 id="处理数据文件"><a href="#处理数据文件" class="headerlink" title="处理数据文件"></a>处理数据文件</h2><h3 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h3><ul><li>sort file # 默认语言的排序规则对文本数据行排序</li><li>sort -n file # 将数字识别成数字而不是字符，并按值排序</li><li>sort -M file # 能识别三字符的月份名，相应排序</li><li>sort -k n file # 指定排序的字段，第n列排序</li><li>sort -t str file # 指定分隔符</li><li>sort -f … # 忽略大小写</li><li>sort -g … # 支持浮点排序</li><li>sort -b … # 忽略起始的空白</li><li>sort -m … # 将两个已排序的文件合并</li><li>sort -o … # 将排序结果写入指定文件</li><li>sort -r … # 反向排序</li></ul><h3 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h3><ul><li>grep -n … # 显示行号</li><li>grep -c … # 显示多少行</li><li>grep -e pattern1 -e pattern2 … # 指定多个模式匹配</li></ul><h3 id="压缩数据"><a href="#压缩数据" class="headerlink" title="压缩数据"></a>压缩数据</h3><ul><li>gzip file # 压缩指定文件</li></ul><h3 id="归档数据"><a href="#归档数据" class="headerlink" title="归档数据"></a>归档数据</h3><ul><li><p>tar -c … # 创建一个新的归档文件</p></li><li><p>tar -x … # 从已有归档文件提取文件</p></li><li><p>tar -f … # 输出结果到文件或者设备</p></li><li><p>tar -p … # 保留所有问加权限</p></li><li><p>tar -v … # 处理文件时显示文件</p></li><li><p>tar -z … # 将输出重定向给gzip命令来压缩文件</p></li><li><p>tar -t … # 列出已有tar归档文件内容</p></li><li><p>tar -cvf test.tar test&#x2F; test2&#x2F; # 将test和test2目录压缩到压缩文件</p></li><li><p>tar -tf test.tar # 列出其内容，但并不提取</p></li><li><p>tar -xvf test.tar # 提取内容</p></li><li><p>tar -zxvf test.tgz # 提取内容</p></li></ul><h1 id="理解bash"><a href="#理解bash" class="headerlink" title="理解bash"></a>理解bash</h1><h2 id="shell类型"><a href="#shell类型" class="headerlink" title="shell类型"></a>shell类型</h2><p><code>cat /etc/passwd | grep $USER</code><br><code>ls -lF /bin/bash</code><br>查看默认类型</p><h2 id="shell的父子关系"><a href="#shell的父子关系" class="headerlink" title="shell的父子关系"></a>shell的父子关系</h2><ul><li>bash # 生成子进程</li><li>ps -f # 查看生成的子进程subshell&#x2F;child shell</li><li>ps –forest # 展示子进程的嵌套结构</li></ul><h3 id="进程列表"><a href="#进程列表" class="headerlink" title="进程列表"></a>进程列表</h3><ul><li>(command1; command2) # 进程列表&#x2F;命令分组将生成一个子进程执行其中的命令，并没有后台执行</li><li>{command1; command2} # 不会生成子进程执行</li><li>echo $BASH_SUBSHELL<ul><li>0:没有子进程</li><li>&gt;0:当前子进程层数</li></ul></li><li>sleep n # 睡眠n秒</li></ul><h3 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h3><ul><li>command &amp; # 将命令后台执行，并未生成子进程</li><li>jobs # 显示后台作业&#x2F;进程：作业号，状态，命令</li><li>jobs -l # 还可以显示pid</li><li>coproc command # 后台生成一个子进程执行，进程名默认为COPROC</li><li>coproc user_name { command; } # 配置后台子进程名字，注意：花括号与命令之前有空格，且命令要以分号结尾<br><strong>注意：子进程成本不低</strong></li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="外部命令-x2F-文件系统命令"><a href="#外部命令-x2F-文件系统命令" class="headerlink" title="外部命令&#x2F;文件系统命令"></a>外部命令&#x2F;文件系统命令</h3><p>存在于bash shell之外的程序，常位于&#x2F;bin，&#x2F;usr&#x2F;bin，&#x2F;sbin，&#x2F;usr&#x2F;sbin中</p><ul><li>衍生forking<ul><li>外部命令执行时会创建一个子进程</li><li>可以使用which 和type来找到</li></ul></li></ul><h3 id="内建命令"><a href="#内建命令" class="headerlink" title="内建命令"></a>内建命令</h3><p>不需要使用子进程来执行</p><p>有些命令echo，pwd既有内建命令也有外部命令，<code>type -a command</code>查看，which只显示外部命令查看</p><h4 id="history内建命令"><a href="#history内建命令" class="headerlink" title="history内建命令"></a>history内建命令</h4><ul><li><p>!! # 换出刚用过的命令来使用 (未必存于历史中)<br><strong>bash命令的历史记录是存放在内存中，shell退出时才写入历史文件:~&#x2F;.bash_history</strong></p></li><li><p>history -a # 强制写入历史文件</p></li><li><p>history -n # 强制重新读入历史文件（历史文件只在打开首个终端会话时，才会被读取，使用-a更新后，其他终端并不会更新历史信息，使用-n即可）</p></li><li><p>!n # 运行编号为n的历史命令</p></li></ul><h4 id="alias别名"><a href="#alias别名" class="headerlink" title="alias别名"></a>alias别名</h4><ul><li>alias -p # 列出当前别名</li></ul><h1 id="linux环境变量"><a href="#linux环境变量" class="headerlink" title="linux环境变量"></a>linux环境变量</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>有两类：局部变量，全局变量</p><h3 id="全局环境变量"><a href="#全局环境变量" class="headerlink" title="全局环境变量"></a>全局环境变量</h3><ul><li>env</li><li>printenv # 同 env 查看全局变量</li><li>printenv env # 查看个别环境变量env</li><li>echo $env # 让变量作为命令行参数</li></ul><p>全局变量可用于进程的所有子进程</p><h3 id="局部环境变量"><a href="#局部环境变量" class="headerlink" title="局部环境变量"></a>局部环境变量</h3><ul><li>set # 显示局部变量，全局变量，以及用户自定义变量，并按照字母表顺序排序</li></ul><h2 id="设置用户自定义变量"><a href="#设置用户自定义变量" class="headerlink" title="设置用户自定义变量"></a>设置用户自定义变量</h2><h3 id="设置局部用户自定义变量"><a href="#设置局部用户自定义变量" class="headerlink" title="设置局部用户自定义变量"></a>设置局部用户自定义变量</h3><p><strong>赋值时变量名等号值之间没有空格，若有空格则会把值视为单独的命令</strong><br><strong>如果要给变量赋一个含有空格的字符串值，必须用单引号来界定字符串的首尾</strong><br><strong>所有的环境变量使用大写字母，如果自己创建的局部变量或者shell脚本，使用小写字母</strong><br><strong>在子shell中不可使用局部环境变量</strong><br><strong>shell脚本自动决定变量的数据类型</strong><br><strong>用户变量长度不得超过20</strong></p><h3 id="设置全局环境变量"><a href="#设置全局环境变量" class="headerlink" title="设置全局环境变量"></a>设置全局环境变量</h3><p>先创建一个局部环境变量，然后用export使命完成<br><strong>修改子进程的全局环境变量不会影响父进程中该变量的值，使用export命令也不行</strong></p><h2 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h2><ul><li>unset env # 删除环境变量env<br><strong>子进程删除全局变量，只对子进程有效</strong></li></ul><h2 id="默认的shell环境变量"><a href="#默认的shell环境变量" class="headerlink" title="默认的shell环境变量"></a>默认的shell环境变量</h2><p>p111</p><h2 id="设置PATH环境变量"><a href="#设置PATH环境变量" class="headerlink" title="设置PATH环境变量"></a>设置PATH环境变量</h2><p>PATH中的目录使用冒号分割<br>PATH&#x3D;.:$PATH</p><h2 id="定位系统环境变量"><a href="#定位系统环境变量" class="headerlink" title="定位系统环境变量"></a>定位系统环境变量</h2><p>登录linux启动bashshell时，默认情况下bash会在几个文件中查找命令，这些文件叫做启动文件或环境文件<br>bash检查的启动文件取决于启动bashshell的方式<br>启动方式有三种</p><ul><li>登录时作为默认登录shell</li><li>作为非登录shell的交互式shell</li><li>作为运行脚本的非交互式shell</li></ul><h3 id="登录shell"><a href="#登录shell" class="headerlink" title="登录shell"></a>登录shell</h3><p>登录shell会从5个不同的文件中读取命令：</p><ul><li>&#x2F;etc&#x2F;profile</li><li>$HOME&#x2F;.bash_profile</li><li>$HOME&#x2F;.bashrc</li><li>$HOME&#x2F;.bash_login</li><li>$HOME&#x2F;.profile</li></ul><h4 id="x2F-etc-x2F-profile"><a href="#x2F-etc-x2F-profile" class="headerlink" title="&#x2F;etc&#x2F;profile"></a>&#x2F;etc&#x2F;profile</h4><p>&#x2F;etc&#x2F;profile是系统默认的主启动文件，系统上每个用户登录都会执行这个启动文件</p><h4 id="HOME目录下的启动文件"><a href="#HOME目录下的启动文件" class="headerlink" title="$HOME目录下的启动文件"></a>$HOME目录下的启动文件</h4><p>shell会按照下列顺序，运行第一个被找到的文件，余下的则被忽略：</p><ul><li>$HOME&#x2F;.bash_profile</li><li>$HOME&#x2F;.bash_login</li><li>$HOME&#x2F;.profile</li></ul><p>$HOME&#x2F;.bashrc 通常通过其他文件运行</p><h3 id="交互式shell进程"><a href="#交互式shell进程" class="headerlink" title="交互式shell进程"></a>交互式shell进程</h3><p>譬如命令行下运行bash启动进程，就不会访问&#x2F;etc&#x2F;profile文件，只会检查$HOME下的.bashrc文件</p><h3 id="非交互式shell进程"><a href="#非交互式shell进程" class="headerlink" title="非交互式shell进程"></a>非交互式shell进程</h3><p>譬如系统执行shell脚本的进程<br>具体不是很明白p120</p><h3 id="环境变量持久化"><a href="#环境变量持久化" class="headerlink" title="环境变量持久化"></a>环境变量持久化</h3><p>升级发行版之后&#x2F;etc&#x2F;profile会被更新，最好是在&#x2F;etc&#x2F;profile.d目录下创建一个.sh结尾的文件，把所有新的或者修改过的全局变量放在这个文件中<br>大多数发行版中，存储个人用户永久性bash shell变量的地方是$HOME&#x2F;.bashrc，除非BASH_ENV被设置</p><h3 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h3><p>给环境变量设置多个值：<br>test&#x3D;(test1 test2 test3 test4)</p><p>echo ${test[3]} # index从0开始<br>echo ${test[*]} # 可用通配符显示整个数组<br>test[1]&#x3D;2 # 单独改变某个索引的值<br>unset test[1] # 单独删除某个索引的值，但该索引还在<br>unset test # 删除整个数组</p><h1 id="linux文件权限"><a href="#linux文件权限" class="headerlink" title="linux文件权限"></a>linux文件权限</h1><h2 id="linux安全性"><a href="#linux安全性" class="headerlink" title="linux安全性"></a>linux安全性</h2><p>用户权限是通过创建用户时分配的用户ID通常缩写UID，每个用户都有唯一UID，登陆时使用登录名，登录名是用户用来登陆系统的最长8字符的字符串，同时关联一个对应的密码</p><h3 id="x2F-etc-x2F-passwd文件"><a href="#x2F-etc-x2F-passwd文件" class="headerlink" title="&#x2F;etc&#x2F;passwd文件"></a>&#x2F;etc&#x2F;passwd文件</h3><p>将用户的登录名匹配到对应的UID</p><p>root是管理员，UID是0<br>linux会为各种功能创建不同的用户账户，并非真正的账户，成为系统账户，是系统上运行各种服务进程访问资源用的特殊账户<br>linux为系统用户预留了500以下的UID</p><ul><li>登录用户名</li><li>用户密码</li><li>用户账户的UID（数字形式）</li><li>用户账户的组ID（GID数字形式）</li><li>用户账户的文本描述（备注字段）</li><li>用户HOME目录的位置</li><li>用户的默认shell</li></ul><p>密码为x，密码文件&#x2F;etc&#x2F;shadow</p><h3 id="x2F-etc-x2F-shadow文件"><a href="#x2F-etc-x2F-shadow文件" class="headerlink" title="&#x2F;etc&#x2F;shadow文件"></a>&#x2F;etc&#x2F;shadow文件</h3><p>root用户才能访问该文件</p><ul><li>与&#x2F;etc&#x2F;passwd文件中登录名字段对应的登录名</li><li>加密后的密码</li><li>自上次修改密码后过去的天数密码</li><li>多少天后才能更改密码</li><li>多少天后必须更改密码</li><li>密码过期前提前多少天提醒用户更改密码</li><li>密码过期后多少天禁用用户账户</li><li>用户账户被禁用的日期</li><li>预留字段给将来使用</li></ul><h3 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h3><ul><li><p>useradd -D # 查看默认值</p><ul><li>GROUP&#x3D;100 # 添加入GID为100的公共组</li><li>HOME&#x3D;&#x2F;home # 新用户的home位于&#x2F;home&#x2F;loginname</li><li>INACTIVE&#x3D;-1 # 新用户在密码过期后不会被禁用</li><li>EXPIRE&#x3D;   # 新用户账户未被设置过期日期</li><li>SHELL&#x3D;&#x2F;bin&#x2F;bash # 默认shell</li><li>SKEL&#x3D;&#x2F;etc&#x2F;skel # 系统将该目录下的内容复制到新用户的HOME目录下（配置文件等）</li><li>CREATE_MAIL_SPOOL&#x3D;yes # 系统为该用户在mail目录下创建一个用户接收邮件的文件</li></ul></li><li><p>useradd -m username # 创建新用户账户</p><ul><li><p>-c comment # 给新用户添加备注</p></li><li><p>-d home_dir # 给主目录指定一个名字</p></li><li><p>-e expire_date # 使用YYYY-MM-DD格式指定一个账户过期时间</p></li><li><p>-f inactive_days # 密码过期多少天后禁用账户，-1标示禁用此功能</p></li><li><p>-g initial_group # 指定GID或者祖名</p></li><li><p>-G group … # 指定除登录组之外所属一个或其他组</p></li><li><p>-M # 不创建home目录</p></li><li><p>-k # 必须和-m一起使用将&#x2F;etc&#x2F;skel目录中的内容复制到用户的home目录</p></li><li><p>-n # 创建一个与用户登录名同名的新组</p></li><li><p>-r # 创建系统用户</p></li><li><p>-p passwd # 指定默认密码</p></li><li><p>-s shell # 指定默认登录shell</p></li><li><p>-u uid # 为账户指定唯一UID</p></li><li><p>-D -b default_home # 更改默认的创建用户home目录的位置</p></li><li><p>-D -e expiration_date # 更改默认的创建用户的过期时间</p></li><li><p>-D -f inactive # 更改默认的创建用户从密码过期到被禁用时间</p></li><li><p>-D -g group # 更改默认的祖名或者GID</p></li><li><p>-D -s shell # 更改默认的登录shell</p></li></ul></li></ul><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><ul><li>userdel # 只会删除&#x2F;etc&#x2F;passwd文件中的信息<ul><li>-r # 会删除用户home目录以及邮件目录</li></ul></li></ul><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><p>p130-132</p><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><h4 id="passwd-amp-chpasswd"><a href="#passwd-amp-chpasswd" class="headerlink" title="passwd&amp;chpasswd"></a>passwd&amp;chpasswd</h4><h4 id="chsh-amp-chfn-amp-chage"><a href="#chsh-amp-chfn-amp-chage" class="headerlink" title="chsh&amp;chfn&amp;chage"></a>chsh&amp;chfn&amp;chage</h4><h2 id="linux组"><a href="#linux组" class="headerlink" title="linux组"></a>linux组</h2><p>p132</p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p>p135</p><h2 id="安全性设置"><a href="#安全性设置" class="headerlink" title="安全性设置"></a>安全性设置</h2><p>p138</p><h2 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h2><p>p140</p><h1 id="安装软件程序"><a href="#安装软件程序" class="headerlink" title="安装软件程序"></a>安装软件程序</h1><h2 id="包管理基础"><a href="#包管理基础" class="headerlink" title="包管理基础"></a>包管理基础</h2><ul><li>dpkg</li><li>rmp</li></ul><h2 id="基于debian的系统"><a href="#基于debian的系统" class="headerlink" title="基于debian的系统"></a>基于debian的系统</h2><h3 id="用aptitude管理软件包"><a href="#用aptitude管理软件包" class="headerlink" title="用aptitude管理软件包"></a>用aptitude管理软件包</h3><ul><li><p>aptitude</p></li><li><p>dpkg -L package # 列出跟某个特定软件包相关的所有文件列表</p></li><li><p>dpkg –search file # 查找特定文件属于哪个软件包（上述操作的反操作，使用时应使用绝对路径）</p></li></ul><h3 id="aptitude安装软件包"><a href="#aptitude安装软件包" class="headerlink" title="aptitude安装软件包"></a>aptitude安装软件包</h3><ul><li>aptitude search package # 自动在两端加通配符<ul><li>每个包前面都有一个p&#x2F;v或者i（i:安装过，其余表示未安装）</li></ul></li><li>aptitude install package # 安装</li></ul><h3 id="aptitude更新软件包"><a href="#aptitude更新软件包" class="headerlink" title="aptitude更新软件包"></a>aptitude更新软件包</h3><ul><li>aptitude safe-upgrade # 将已安装的所有软件包更新到最新版本（会检查包之间的依赖关系）<ul><li>aptitude full-upgrade</li><li>aptitude dist-upgrade</li></ul></li></ul><h3 id="aptitude卸载软件包"><a href="#aptitude卸载软件包" class="headerlink" title="aptitude卸载软件包"></a>aptitude卸载软件包</h3><ul><li>aptitude remove package # 不删除数据和配置文件</li><li>aptitude purge package # 删除数据和配置文件<br>c：软件已删除，配置文件尚未清除<br>p：配置文件也已删除</li></ul><h3 id="aptitude仓库"><a href="#aptitude仓库" class="headerlink" title="aptitude仓库"></a>aptitude仓库</h3><p>默认软件仓库配置文件&#x2F;etc&#x2F;apt&#x2F;sources.list</p><p>deb (or deb-src) address distribution_name package_type_list<br>deb表明软件包类型<br>address条目是软件仓库的web地址<br>distribution_name是这个特定软件仓库的发行版名称<br>package_type_list表明仓库中有什么类型的包</p><h2 id="基于RedHat的系统"><a href="#基于RedHat的系统" class="headerlink" title="基于RedHat的系统"></a>基于RedHat的系统</h2><ul><li>yum 在RedHat，Fedora中使用</li><li>urpm 在Mandriva中使用</li><li>zypper 在openSUSE中使用</li></ul><h3 id="列出已安装包"><a href="#列出已安装包" class="headerlink" title="列出已安装包"></a>列出已安装包</h3><ul><li>yum list installed<br>urpm与zypper见p172</li><li>yum provides file_name 找出某个文件属于哪个包<br>yum会查找三个仓库 base updates installed</li></ul><h3 id="用yum安装软件"><a href="#用yum安装软件" class="headerlink" title="用yum安装软件"></a>用yum安装软件</h3><ul><li>yum install package # 从仓库中安装</li><li>yum localinstall package # 手动下载安装</li></ul><h3 id="用yum更新软件"><a href="#用yum更新软件" class="headerlink" title="用yum更新软件"></a>用yum更新软件</h3><ul><li>yum list updates # 列出所有已安装包的可用更新</li><li>yum update package # 更新特定包</li><li>yum update # 更新所有包</li></ul><h3 id="用yum卸载软件"><a href="#用yum卸载软件" class="headerlink" title="用yum卸载软件"></a>用yum卸载软件</h3><ul><li>yum remove package # 删除软件包，保留配置文件和数据文件</li><li>yum erase package # 删除软件包，和它所有文件</li></ul><h3 id="处理损坏的包依赖关系"><a href="#处理损坏的包依赖关系" class="headerlink" title="处理损坏的包依赖关系"></a>处理损坏的包依赖关系</h3><ul><li>yum clean all</li><li>yum update</li></ul><p>若不能解决问题：</p><ul><li>yum deplist package # 显示所有包的库依赖关系以及什么软件可以提供这些库依赖关系</li></ul><p>若仍不能解决问题：</p><ul><li>yum update –skip-broken # 虽然救不了损坏的包，但可以更新系统上的其他包</li></ul><h3 id="yum软件仓库"><a href="#yum软件仓库" class="headerlink" title="yum软件仓库"></a>yum软件仓库</h3><ul><li>yum repolist # 正从哪些仓库中获取软件<br>yum的仓库定义文件位于&#x2F;etc&#x2F;yum.repos.d</li></ul><h2 id="从源码安装"><a href="#从源码安装" class="headerlink" title="从源码安装"></a>从源码安装</h2><ul><li>.&#x2F;configure</li><li>make</li><li>make install</li></ul><h1 id="使用编辑器"><a href="#使用编辑器" class="headerlink" title="使用编辑器"></a>使用编辑器</h1><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>vi improves</p><h3 id="vim软件包"><a href="#vim软件包" class="headerlink" title="vim软件包"></a>vim软件包</h3><ul><li>alias vi</li><li>which vim</li><li>ls -l “last result”</li><li>readlink -f “last result” # 查找一系列链接文件的最终目标</li></ul><p>如果是&#x2F;usr&#x2F;bin&#x2F;vim.tiny则其只提供少量的vim功能：</p><ul><li>sudo apt-get install vim</li></ul><h3 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h3><ul><li>h 左移</li><li>j 下移</li><li>k 上移</li><li>l 后移</li><li>ctrl+f 下翻一页</li><li>ctrl+b 上翻一页</li><li>G 最后一行</li><li>num G 第num行</li><li>gg 第一行</li></ul><h3 id="编辑数据"><a href="#编辑数据" class="headerlink" title="编辑数据"></a>编辑数据</h3><ul><li>x 删除光标所在数据</li><li>dd 删除光标所在行</li><li>dw 删除光标所在单词</li><li>d$ 删除光标至行尾</li><li>J 用空格拼接下一行</li><li>u 撤销前一操作</li><li>a 在光标后追加数据</li><li>A 在当前行行尾添加数据</li><li>r 用字符替换光标位置数据</li><li>R 用数据替换光标数据直到按下ESC</li></ul><p>前面加数字标示重复操作</p><h3 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h3><p>vim在删除数据时会将数据放在某个寄存器中使用p取回数据</p><ul><li><p>y 复制数据yank<br>与上文中的d用法一样，如：</p></li><li><p>yw 复制单词</p></li><li><p>y$ 复制到行尾</p></li><li><p>v 可视模式，方便复制</p></li></ul><h3 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h3><ul><li>&#x2F;key # 查找</li><li>:s&#x2F;old&#x2F;new&#x2F; # 替换当前行的old</li><li>:s&#x2F;old&#x2F;new&#x2F;g # 替换当前行所有old</li><li>:n,ms&#x2F;old&#x2F;new&#x2F;g # 替换n到m之间所有old</li><li>:%s&#x2F;old&#x2F;new&#x2F;g # 替换整个文件中的所有old</li><li>:%s&#x2F;old&#x2F;new&#x2F;gc # 替换整个文件中的所有old，但在每次出现时提示</li></ul><h2 id="nano编辑器"><a href="#nano编辑器" class="headerlink" title="nano编辑器"></a>nano编辑器</h2><p>nano</p><p>p187</p><h2 id="emacs编辑器"><a href="#emacs编辑器" class="headerlink" title="emacs编辑器"></a>emacs编辑器</h2><p>emacs<br>p188</p><h2 id="KDE系编辑器"><a href="#KDE系编辑器" class="headerlink" title="KDE系编辑器"></a>KDE系编辑器</h2><p>kwrite</p><p>p196</p><h2 id="GNOME编辑器"><a href="#GNOME编辑器" class="headerlink" title="GNOME编辑器"></a>GNOME编辑器</h2><p>gedit</p><p>p202</p><h1 id="基本脚本"><a href="#基本脚本" class="headerlink" title="基本脚本"></a>基本脚本</h1><h2 id="使用多个命令"><a href="#使用多个命令" class="headerlink" title="使用多个命令"></a>使用多个命令</h2><p>分号隔开，不超过最大命令行字符数255</p><h2 id="创建shell脚本文件"><a href="#创建shell脚本文件" class="headerlink" title="创建shell脚本文件"></a>创建shell脚本文件</h2><h2 id="显示消息"><a href="#显示消息" class="headerlink" title="显示消息"></a>显示消息</h2><ul><li>echo “mesg’test” # 如有引号出现，则使用另一种引号划定起来即可</li><li>echo -e “1\t2” # 打印非可打印字符</li><li>echo -n mesg # 打印信息后不换行</li></ul><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><h3 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h3><p>echo $USER<br>echo ${USER}</p><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><p>详情：设置局部用户自定义变量</p><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><ul><li><code>command</code></li><li>$(command)</li></ul><p><strong>如果命令中有反斜杠，则使用<code>command</code>格式时需要对其转意</strong><br><strong>命令替换会创建一个子shell来运行使用.&#x2F;运行命令也会创建子shell，运行命令时不加入路径就不会创建子shell</strong></p><h2 id="重定向输入与输出"><a href="#重定向输入与输出" class="headerlink" title="重定向输入与输出"></a>重定向输入与输出</h2><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>将命令输出发送至文件</p><ul><li><blockquote><p>会覆盖原有文件</p></blockquote></li><li><blockquote><blockquote><p>会追加数据</p></blockquote></blockquote></li></ul><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><ul><li>&lt;将文件内容重定向到命令</li><li>&lt;&lt; 内联输入重定向<ul><li>必须指定一个文本标记来划分数据的开始和结尾</li><li>任何字符串都可作为文本标记</li><li>数据的开始和结尾文本必须一致</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc &lt;&lt; test</span><br><span class="line">testagain</span><br><span class="line">testwillfinish</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>上述信息会输出2 2 25(两行，两个单词，25个字符)</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>一个命令的输出作为另一个命令的输入，重定向到另一个命令，叫做管道连接</p><ul><li>rpm -qa | sort | more</li></ul><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><h3 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h3><ul><li>expr 2 + 4 # 输出6必须有空格</li><li>expr 2 * 4 # 输出8<br>todo: expr 命令操作符：P223</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用$[]"></a>使用$[]</h3><p>只能进行整数运算</p><h3 id="浮点解决方案"><a href="#浮点解决方案" class="headerlink" title="浮点解决方案"></a>浮点解决方案</h3><h4 id="bc命令基本用法"><a href="#bc命令基本用法" class="headerlink" title="bc命令基本用法"></a>bc命令基本用法</h4><p>bash计算器能够识别：</p><ul><li>数字（整数和浮点数）</li><li>变量（变量和数组）</li><li>注释（#或者&#x2F;**&#x2F;）</li><li>表达式</li><li>编程语言（例如if-then）</li><li>函数</li></ul><p>输入quit退出</p><p>浮点运算是由内建变量scale控制，为保留小数点的位数，默认为0，-q命令行选项不显示bash计算器欢迎信息</p><h4 id="脚本中使用bc"><a href="#脚本中使用bc" class="headerlink" title="脚本中使用bc"></a>脚本中使用bc</h4><p>variable&#x3D;$(echo “options; expression” | bc)</p><ul><li>echo “234; 23423;sdf;234&#x2F;2” | bc #输出：234 23423 0 117</li></ul><h2 id="退出脚本"><a href="#退出脚本" class="headerlink" title="退出脚本"></a>退出脚本</h2><h3 id="查看退出状态码"><a href="#查看退出状态码" class="headerlink" title="查看退出状态码"></a>查看退出状态码</h3><ul><li>echo $?<ul><li>0:命令成功结束</li><li>1:一般性未知错误</li><li>2:不适合的shell命令</li><li>126:命令不可执行</li><li>127:没找到命令</li><li>128:无效的退出参数</li><li>128+x:与linux信号x想关的严重错误</li><li>130:通过ctrl+c终止的命令</li><li>255:正常范围之外的退出状态码</li></ul></li></ul><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>默认下shell脚本会以最后一个命令的退出状态码退出<br>exit允许在脚本结束时指定一个退出状态码，最大只能是255，shell会通过模运算来得到这个结果</p><h1 id="结构化命令"><a href="#结构化命令" class="headerlink" title="结构化命令"></a>结构化命令</h1><h2 id="if-then"><a href="#if-then" class="headerlink" title="if-then"></a>if-then</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">    commands</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if command;then</span><br><span class="line">    commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果command的退出状态码为0，then的部分就会被执行</p><h2 id="if-then-else"><a href="#if-then-else" class="headerlink" title="if-then-else"></a>if-then-else</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if command;then</span><br><span class="line">    commands</span><br><span class="line">else</span><br><span class="line">    commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="elif"><a href="#elif" class="headerlink" title="elif"></a>elif</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if command;then</span><br><span class="line">    commands</span><br><span class="line">elif command2</span><br><span class="line">then</span><br><span class="line">    commands</span><br><span class="line">...</span><br><span class="line">elif command3</span><br><span class="line">then</span><br><span class="line">    commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if test condition</span><br><span class="line">then</span><br><span class="line">    commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果condition不写则会以非0的退出状态码退出，执行else语句，可以利用此方法判断变量是否有内容：if test $param …</p><p>省略test：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ condition ]</span><br><span class="line">then</span><br><span class="line">    commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>方括号与condition之间要有空格</strong></p><ul><li>数值比较</li><li>字符串比较</li><li>文件比较</li></ul><h3 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h3><ul><li>if [ n1 -eq n2 ] # 是否相等<ul><li>-eq # 是否相等</li><li>-ge # 是否大于等于</li><li>-gt # 是否大于</li><li>-le # 是否小于等于</li><li>-lt # 是否小于</li><li>-ne # 是否不等于<br><strong>只能处理整数</strong></li></ul></li></ul><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ul><li>str1 &#x3D; str2 # 是否1与2相等</li><li>str1 !&#x3D; str2 # 是否1与2不等</li><li>str1 &lt; str2 # 是否1比2小</li><li>str1 &gt; str2 # 是否1比2大</li><li>-n str # 是否长度非0</li><li>-z str # 是否长度为0</li></ul><p><strong>大于小于号需要转义才能正常使用</strong><br><strong>test时大写字母小于小写字母，而sort排序时相反：test使用ASCII数值，sort使用系统本地化语言设置中定义的排序顺序，对于英语小写出现在大写之前</strong><br><strong>!!!如果比较数值时使用数学运算符，将视为字符串比较，结果可能是错误的!!!</strong></p><h3 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h3><ul><li>-d file # 是否是目录</li><li>-e file # 是否存在</li><li>-f file # 是否是文件</li><li>-r file # 是否存在并可读</li><li>-s file # 是否存在并非空</li><li>-w file # 是否存在并可写</li><li>-x file # 是否存在并可执行</li><li>-O file # 是否存在并属当前用户所有</li><li>-G file # 是否存在并默认组与当前用户相同</li><li>file1 -nt file2 # file1是否比file2新，并不会判断两个文件是否存在，如不存在返回错误结果</li><li>file1 -ot file2 # file1是否比file2旧，并不会判断两个文件是否存在，如不存在返回错误结果</li></ul><h2 id="复合条件测试"><a href="#复合条件测试" class="headerlink" title="复合条件测试"></a>复合条件测试</h2><ul><li>if [ condition ] &amp;&amp; [ condition2 ]</li><li>if [ condition ] || [ condition2 ]</li></ul><h2 id="if-then高级特性"><a href="#if-then高级特性" class="headerlink" title="if-then高级特性"></a>if-then高级特性</h2><ul><li>用于数学表达式的双括号</li><li>用于高级字符串处理功能的双方括号</li></ul><h3 id="使用双括号"><a href="#使用双括号" class="headerlink" title="使用双括号"></a>使用双括号</h3><p>(( expression ))</p><ul><li>val++ # 后增</li><li>val– # 后减</li><li>++val # 先增</li><li>–val # 先减</li><li>! # 逻辑求反</li><li>~ # 位求反</li><li>** # 幂运算</li><li>&lt;&lt; # 左位移</li><li><blockquote><blockquote><h1 id="右位移"><a href="#右位移" class="headerlink" title="右位移"></a>右位移</h1></blockquote></blockquote></li><li>&amp; # 位布尔和</li><li>| # 位布尔或</li><li>&amp;&amp; # 逻辑和</li><li>|| # 逻辑或</li></ul><p>其中的大于小于号不需要转义</p><h3 id="使用双方括号"><a href="#使用双方括号" class="headerlink" title="使用双方括号"></a>使用双方括号</h3><p>[[ expression ]]<br>可使用test命令中标准的字符串比较，还提供了一个test没有的特性：模式匹配</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [[ $USER == zhang* ]];then</span><br><span class="line">    echo &quot;hello $USER&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;sorry, I don&#x27;t know you&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="case命令"><a href="#case命令" class="headerlink" title="case命令"></a>case命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case $USER in</span><br><span class="line">rich|zhang)</span><br><span class="line">    echo welcome;;</span><br><span class="line">test)</span><br><span class="line">    echo ditto;;</span><br><span class="line">*)</span><br><span class="line">    echo fail</span><br><span class="line">    echo out!!!!;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h1 id="更多结构化命令"><a href="#更多结构化命令" class="headerlink" title="更多结构化命令"></a>更多结构化命令</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l=`ls`</span><br><span class="line">for i in $(cat $file) $l;do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>循环结束后test一直有效</strong><br><strong>for循环假定以空格分割的，如果有包含空格的数据值，trouble！用引号隔开即可</strong></p><h3 id="更改字段分隔符"><a href="#更改字段分隔符" class="headerlink" title="更改字段分隔符"></a>更改字段分隔符</h3><p>有一环境变量：内部字段分隔符IFS，默认分隔符：</p><ul><li><p>空格</p></li><li><p>制表符</p></li><li><p>换行符</p></li><li><p>IFS&#x3D;$’\n’ # 用换行符作为分隔符</p></li><li><p>IFS&#x3D;: # 使用冒号作为分隔符</p></li><li><p>IFS&#x3D;$’\n’:;” # 使用换行符、冒号、分号、引号作为分隔符</p></li></ul><h3 id="使用通配符读取目录"><a href="#使用通配符读取目录" class="headerlink" title="使用通配符读取目录"></a>使用通配符读取目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for file in /dir/*</span><br><span class="line">do</span><br><span class="line">    if [ -d &quot;$file&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;$file is a directory&quot;</span><br><span class="line">    elif [ -f &quot;$file&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;$file is a file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="C语言风格的for"><a href="#C语言风格的for" class="headerlink" title="C语言风格的for"></a>C语言风格的for</h2><p>for (( variable assignment ; condition ; iteration process ))</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (( a = 1; a &lt; 10; a++));then</span><br><span class="line">    echo $a</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>而且可以使用多个变量，但只能使用一个条件：for((a&#x3D;1,b&#x3D;10;a&lt;10;a++,b–))</strong></p><h2 id="while命令"><a href="#while命令" class="headerlink" title="while命令"></a>while命令</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while test command;do</span><br><span class="line">    commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="使用多个测试命令"><a href="#使用多个测试命令" class="headerlink" title="使用多个测试命令"></a>使用多个测试命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while test command;test command1;do</span><br><span class="line">    commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="until命令"><a href="#until命令" class="headerlink" title="until命令"></a>until命令</h2><p>until跟while相反，只有测试命令的退出状态码不为0，才执行循环，一旦为0，循环结束退出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">until test command;do</span><br><span class="line">    commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>也可以有多个测试，但只有最后一个有效，只有在最后一个测试命令成立时才停止</strong></p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul><li>break # 跳出内部循环，自动中止最内层的循环</li><li>break n # 跳出外部循环，n默认为1</li></ul><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul><li>continue # 中止某次循环中的命令</li><li>continue n # 指定继续哪一级的循环命令</li></ul><h2 id="处理循环的输出"><a href="#处理循环的输出" class="headerlink" title="处理循环的输出"></a>处理循环的输出</h2><p>可以在done命令之后加一个处理命令：</p><p>done &gt; output # 会将结果重定向到文件，而不是输出</p><p>同样的，也可以将结果管接给另一个命令</p><h2 id="循环实例"><a href="#循环实例" class="headerlink" title="循环实例"></a>循环实例</h2><h3 id="创建多个用户账户"><a href="#创建多个用户账户" class="headerlink" title="创建多个用户账户"></a>创建多个用户账户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input=users.csv</span><br><span class="line">while IFS=&#x27;,&#x27; read -r userid namd</span><br><span class="line">do</span><br><span class="line">    useradd -c &quot;$name&quot; -m &quot;$userid&quot;</span><br><span class="line">done &lt; &quot;$input&quot;</span><br></pre></td></tr></table></figure><h1 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h1><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><h3 id="读取参数"><a href="#读取参数" class="headerlink" title="读取参数"></a>读取参数</h3><ul><li>bash会将一些位置参数的特殊变量输入到命令行中的所有参数</li><li>也包含shell所执行的脚本名称</li><li>$0是程序名，$1-$9是第1-9个参数</li><li>${10}是第十个参数，不止九个的参数必须加花括号</li></ul><h3 id="读取脚本名"><a href="#读取脚本名" class="headerlink" title="读取脚本名"></a>读取脚本名</h3><p>若执行脚本带文件路径，则$0也会带有路径</p><ul><li>name&#x3D;$(basename $0) # 返回不包含路径的文件名</li></ul><h3 id="测试参数"><a href="#测试参数" class="headerlink" title="测试参数"></a>测试参数</h3><ul><li>-n $1 # 测试参数是否存在</li></ul><h2 id="特殊参数变量"><a href="#特殊参数变量" class="headerlink" title="特殊参数变量"></a>特殊参数变量</h2><h3 id="参数统计"><a href="#参数统计" class="headerlink" title="参数统计"></a>参数统计</h3><ul><li><code>$#</code><ul><li>脚本运行时携带的参数个数，不包含$0</li></ul></li><li><code>$&#123;!#&#125;</code><ul><li>最后一个命令行参数，支持bash，不支持shell</li></ul></li></ul><h3 id="抓取所有数据"><a href="#抓取所有数据" class="headerlink" title="抓取所有数据"></a>抓取所有数据</h3><ul><li><code>$*</code>或者<code>$@</code>访问所有提供的参数<ul><li><p>区别是<code>$*</code>会将所有的参数视为一个整体，<code>$@</code>当作同一字符串中的多个独立的单词</p></li><li><p>for循环时，<code>$*</code>参数会当成一个整体，<code>$@</code>会遍历每一个参数（参数包含空格怎么办）</p></li><li><p>区别在于：</p><ul><li>[ -n “$@” ] &amp;&amp; echo 1 || echo 2 # 是否参数非空，是非空，退出码为0，输出1</li><li>[ -n “$*” ] &amp;&amp; echo 1 || echo 2 # 是否参数非空，是空的，所以不是非空，退出码不为0，输出2</li></ul></li></ul></li></ul><h2 id="移动变量"><a href="#移动变量" class="headerlink" title="移动变量"></a>移动变量</h2><ul><li>shift n # 使用左移参数，n默认为1，$0是程序名不会被改变，移除的变量将丢弃，不会再找到</li></ul><h2 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h2><p>选项是跟在单个破折线之后的单个字母，它能改变命令的行为，以下为三种处理选项的方法：</p><h3 id="查找选项"><a href="#查找选项" class="headerlink" title="查找选项"></a>查找选项</h3><h4 id="处理简单选项"><a href="#处理简单选项" class="headerlink" title="处理简单选项"></a>处理简单选项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ];<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    -a) commands;;</span><br><span class="line">    -b) commands;;</span><br><span class="line">    -c) commands;;</span><br><span class="line">    *) commands;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="分离参数和选项"><a href="#分离参数和选项" class="headerlink" title="分离参数和选项"></a>分离参数和选项</h4><p>双破折线表明选项列表结束，剩下的命令行参数都是参数，case中加一个–)) shift; break;;就可以处理参数了</p><h4 id="处理带值的选项"><a href="#处理带值的选项" class="headerlink" title="处理带值的选项"></a>处理带值的选项</h4><p>处理完之后加上shift;;就可以了</p><h3 id="使用getopt处理合并选项"><a href="#使用getopt处理合并选项" class="headerlink" title="使用getopt处理合并选项"></a>使用getopt处理合并选项</h3><p>getopt命令是一个处理命令行选项和参数时非常方便的工具</p><h4 id="命令的格式"><a href="#命令的格式" class="headerlink" title="命令的格式"></a>命令的格式</h4><p>getopt可以接收一系列任意形式的命令行选项和参数，并自动将他们转换成适当的格式，命令格式如下：</p><ul><li>getopt optstring parameters<ul><li>optstring 定义了命令行有效的选项字母，还定义了哪些选项字母需要参数<ul><li>在optstring列出你要在脚本中用到的每个命令行选项字母，并在需要参数的选项字母后面加一个冒号</li></ul></li><li>parameters 是待解析的参数</li></ul></li></ul><h4 id="在脚本中使用getopt"><a href="#在脚本中使用getopt" class="headerlink" title="在脚本中使用getopt"></a>在脚本中使用getopt</h4><ul><li>set – $(getopt -q optstring “$@”)<ul><li>set 的–选项将命令行参数替换成set命令的命令行值</li><li>之后就可以正常使用了<br>与<strong>处理简单选项</strong>功能配合使用<br><strong>使用getopt时参数不可有空格，用引号也没用。测试了一下，貌似是可以的</strong></li></ul></li></ul><h3 id="更高级的内建命令getopts"><a href="#更高级的内建命令getopts" class="headerlink" title="更高级的内建命令getopts"></a>更高级的内建命令getopts</h3><p>命令格式：</p><ul><li>getopts optstring variable<ul><li>getopts一次只处理命令行上检测到的一个参数，处理完所有参数后会退出返回一个大于0的退出状态码，非常适合用于解析命令行所有参数的循环</li><li>optstring 有效选项的字母列在其中，如果选项要求有参数值，就加一个冒号，如果要去掉错误信息就在最前面加一个冒号</li><li>variable getopts会将解析的选项保存在命令行中定义的variable中，跟getopt不一样的是不带开头的单破折线<ul><li>OPTARG 会保存需要跟的参数值</li><li>OPTING 保存了参数列表中正在处理的参数位置</li></ul></li><li>跟getopt不同的是，getopts拿不到–之后的参数</li></ul></li></ul><p><strong>demo:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while getopts :ab:c opt;do</span><br><span class="line">    case &quot;$opt&quot; in</span><br><span class="line">    a) commands;;</span><br><span class="line">    b) commands;;</span><br><span class="line">    c) commands;;</span><br><span class="line">    *) commands;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>杀死服务器特定进程demo:</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">service=raptor_latest@172.16.1.71</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -- $(getopt -q xp:h <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span><br><span class="line">branch=master</span><br><span class="line">port=2334</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        -p)</span><br><span class="line">            port=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">            <span class="built_in">shift</span> 2</span><br><span class="line">            ;;</span><br><span class="line">        -h)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span> -p port     : the default is 2334&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">        --)</span><br><span class="line">            [ <span class="string">&quot;<span class="variable">$port</span>&quot;</span> = <span class="string">&quot;2334&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;port was not given, default is the 2334.&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;port is &quot;</span><span class="variable">$port</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">&quot;ERROR: did not recognize option &#x27;%s&#x27;, please try -h\\n&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">ssh <span class="variable">$service</span> <span class="string">&quot;ps -ef | grep &#x27;/home/raptor_latest/raptor/py36-venv/bin/python manage.py runserver 0.0.0.0:<span class="variable">$port</span>&#x27; | grep -v &#x27;grep&#x27; | awk &#x27;&#123;print \$2&#125;&#x27; | xargs -i kill &#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="选项标准化"><a href="#选项标准化" class="headerlink" title="选项标准化"></a>选项标准化</h2><p>常用的linux命令选项：</p><ul><li>-a # 显示所有对象</li><li>-c # 生成一个计数</li><li>-d # 指定一个目录</li><li>-e # 扩展一个对象</li><li>-f # 指定读入数据的文件</li><li>-h # 显示命令的帮助信息</li><li>-i # 忽略文本的大小写</li><li>-l # 产生输出的长格式版本</li><li>-n # 使用非交互式模式（批处理）</li><li>-o # 将所有输出重定向到指定的输出文件</li><li>-q # 以安静模式运行</li><li>-r # 递归的处理目录和文件</li><li>-s # 以安静模式运行</li><li>-v # 生成详细输出</li><li>-x # 排除某个对象</li><li>-y # 对所有问题回答yes</li></ul><h2 id="获得用户输入"><a href="#获得用户输入" class="headerlink" title="获得用户输入"></a>获得用户输入</h2><h3 id="基本的读取"><a href="#基本的读取" class="headerlink" title="基本的读取"></a>基本的读取</h3><ul><li>read var # 从标准输入或者令一个文件描述符中接收输入，放入一个变量中<ul><li>-p # 该选项指定提示符</li><li>如果变量不够，剩下的数据就全分配给最后一个变量</li><li>也可以不指定变量，数据会放入特殊的环境变量REPLY中</li><li>-t # -t指定一个计数器，read命令等待的秒数，计时器过期后，read命令会返回一个非0退出状态码，可结合if-then使用</li><li>-n3 # 统计输入的字符数达到预期的字符数（3）就自动退出，将输入数据给变量，不用回车结束，也可回车提前结束</li><li>-s # 隐藏方式读取（实际上数据会被显示只是read会将文本颜色设成跟背景色一致）如待用户输入密码时</li></ul></li></ul><h3 id="从文件中读取"><a href="#从文件中读取" class="headerlink" title="从文件中读取"></a>从文件中读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file | while read line;do</span><br><span class="line">    echo $line</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>或者使用输入重定向，见下章第三节</p><h1 id="呈现数据"><a href="#呈现数据" class="headerlink" title="呈现数据"></a>呈现数据</h1><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><p>两种显示脚本输出的方法：</p><ul><li>在显示器屏幕上输出</li><li>将输出重定向到文件中</li></ul><h3 id="标准文件描述符"><a href="#标准文件描述符" class="headerlink" title="标准文件描述符"></a>标准文件描述符</h3><p>linux系统将每个对象当作文件处理，也包括输入输出过程。<br>linux用文件描述符（file descriptor）来标识每个文件对象，其是一个非负整数，可以唯一标识会话中打开的文件。<br>每个进程最多可以有九个文件描述符，处于特殊目的，bash保留了前三个文件描述符（0、1、2）：</p><ul><li>0 # STDIN 标准输入</li><li>1 # STDOUT 标准输出</li><li>2 # STDERR 标准错误</li></ul><h4 id="STDIN"><a href="#STDIN" class="headerlink" title="STDIN"></a>STDIN</h4><p>对于终端来说标准输入是键盘</p><ul><li>cat # 可接收标准输入</li><li>cat &lt; file # 可使用STDIN重定向符号强制cat命令接收另一个非STDIN文件的输入</li></ul><h4 id="STDOUT"><a href="#STDOUT" class="headerlink" title="STDOUT"></a>STDOUT</h4><p>对于终端来说标准输出是终端显示器，shell所有输出都会定向到标准输出中。<br>可以用输出重定向来改变，也可以使用数据追加。</p><h4 id="STDERR"><a href="#STDERR" class="headerlink" title="STDERR"></a>STDERR</h4><p>shell对于错误消息的处理和普通输出是分开的，通过STDERR文件描述符来处理错误消息。<br><strong>默认情况下，STDERR文件描述符和STDOUT文件描述符会指向相同的地方，但不会随着STDOUT的重定向发生改变。</strong></p><h3 id="重定向错误"><a href="#重定向错误" class="headerlink" title="重定向错误"></a>重定向错误</h3><p>将文件描述符紧紧放在重定向符号前即可：<code>ls ./ ./wrongdir 1&gt; stdout 2&gt; stderr</code>。<br>也可以放在一个文件中（bash赋予错误信息更高的优先级）：<code>ls ./ ./wrongdir &amp;&gt; stdboth</code>。</p><h2 id="脚本中重定向输出"><a href="#脚本中重定向输出" class="headerlink" title="脚本中重定向输出"></a>脚本中重定向输出</h2><ul><li>临时重定向行输出</li><li>永久重定向脚本中的所有命令</li></ul><h3 id="临时重定向"><a href="#临时重定向" class="headerlink" title="临时重定向"></a>临时重定向</h3><p>在脚本中生成错误信息<code>echo &quot;error message&quot; &gt;&amp;2</code></p><h3 id="永久重定向"><a href="#永久重定向" class="headerlink" title="永久重定向"></a>永久重定向</h3><p>如果脚本中有大量数据需要重定向，可以用exec命令告诉shell在脚本执行期间重定向某个特定文件描述符</p><p><code>exec 1 &gt; file</code>会启动一个新shell并将STDOUT文件描述符重定向到文件，之后脚本中所有发给STDOUT的所有输出都被重定向到该文件<br><code>exec 1 &gt;&gt; file</code>会启动一个新shell并将STDOUT文件描述符重定向到文件，之后脚本中所有发给STDOUT的所有输出都被追加到该文件</p><h2 id="输入重定向-1"><a href="#输入重定向-1" class="headerlink" title="输入重定向"></a>输入重定向</h2><p><code>exec 0 &lt; file</code>可用于读文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec 0 &lt; file</span><br><span class="line">while read line;do</span><br><span class="line">    echo $line</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="创建自己重定向"><a href="#创建自己重定向" class="headerlink" title="创建自己重定向"></a>创建自己重定向</h2><p>可自由使用3~8的文件描述符，使用方法同上</p><h3 id="创建输出文件描述符"><a href="#创建输出文件描述符" class="headerlink" title="创建输出文件描述符"></a>创建输出文件描述符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec 3 &gt; file</span><br><span class="line">echo user define message &gt;&amp;3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec 3 &gt;&gt; file</span><br><span class="line">echo user define message &gt;&amp;3</span><br></pre></td></tr></table></figure><h3 id="重定向文件描述符"><a href="#重定向文件描述符" class="headerlink" title="重定向文件描述符"></a>重定向文件描述符</h3><p>用于恢复文件描述符，当作指针理解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec 3&gt;&amp;1 # 备份之前的文件描述符</span><br><span class="line">exec 1&gt;fileout # 输出重定向</span><br><span class="line"></span><br><span class="line">echo output in file</span><br><span class="line">echo ditto</span><br><span class="line"></span><br><span class="line">exec 1&gt;&amp;3 # 恢复文件描述符</span><br><span class="line">echo back to normal</span><br></pre></td></tr></table></figure><h3 id="创建输入文件描述符"><a href="#创建输入文件描述符" class="headerlink" title="创建输入文件描述符"></a>创建输入文件描述符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec 6&lt;&amp;0</span><br><span class="line">exec 0&lt;testfile</span><br><span class="line">count=1</span><br><span class="line">while read line;do</span><br><span class="line">    echo &quot;line : $line&quot;</span><br><span class="line">done</span><br><span class="line">exec 0&lt;&amp;6</span><br></pre></td></tr></table></figure><h3 id="创建读写文件描述符"><a href="#创建读写文件描述符" class="headerlink" title="创建读写文件描述符"></a>创建读写文件描述符</h3><p>任何读写都是从文件指针上次的位置开始，要足够小心才能避免出错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec 3&lt;&gt;testfile</span><br><span class="line">read line &lt;&amp;3</span><br><span class="line">echo &quot;line:$line&quot;</span><br><span class="line">echo &quot;test line&quot; &gt;&amp;3</span><br></pre></td></tr></table></figure><p>若testfile中有：<br>first line<br>second line<br>thrid line<br>执行之后会变成<br>first line<br>test line<br>e<br>thrid line</p><h3 id="关闭文件描述符"><a href="#关闭文件描述符" class="headerlink" title="关闭文件描述符"></a>关闭文件描述符</h3><p><code>exec 3&gt;&amp;-</code> # 关闭之后将不能在脚本中再次使用</p><h2 id="列出打开的文件描述符"><a href="#列出打开的文件描述符" class="headerlink" title="列出打开的文件描述符"></a>列出打开的文件描述符</h2><ul><li>lsof # 显示当前linux系统上打开的每个文件的有关信息，包括后台运行的所有进程以及登录到系统的任何用户。<ul><li>所以会向非系统管理员用户提供linux系统的信息，故，许多linux系统隐藏了该命令，这时需要全路径来引用<code>/usr/sbin/lsof</code></li><li>lsof -a -p $$ -d 0,1,2<ul><li>-a # 表示对其他两个选项的结果执行布尔and运算</li><li>$$ # 显示当前进程的pid</li><li>-p # 指定进程pid</li><li>d # 指定要显示的文件描述符编号</li></ul></li></ul></li></ul><p>lsof的默认输出：</p><ul><li>COMMAND # 正在运行的命令名的前9个字符</li><li>PID # 进程pid</li><li>USER # 进程属主的登录名</li><li>FD # 文件描述符号以及访问类型<ul><li>r # 读</li><li>w # 写</li><li>u # 读写</li></ul></li><li>TYPE # 文件的类型<ul><li>CHR # 字符型</li><li>BLK # 块型</li><li>DIR # 目录</li><li>REG # 常规文件</li></ul></li><li>DEVICE # 设备的设备号，主设备号和从设备号</li><li>SIZE # 如果有的话，表示文件的大小</li><li>NODE # 本地文件的节点号</li><li>NAME # 文件名</li></ul><h2 id="阻止命令输出"><a href="#阻止命令输出" class="headerlink" title="阻止命令输出"></a>阻止命令输出</h2><p>将内容重定向到叫null的特殊文件，标准位置为<code>/dev/null</code>，重定向到此位置的任何数据都会被丢掉</p><p>常用于清除日志文件：<code>cat /dev/null &gt; logfile</code></p><h2 id="创建临时文件"><a href="#创建临时文件" class="headerlink" title="创建临时文件"></a>创建临时文件</h2><p>&#x2F;tmp目录来存放不需要永久保留的文件，大多数linux系统启动时自动删除tmp目录的所有文件，任何用户都有权限使用</p><ul><li>mktemp # 可以在&#x2F;tmp目录中创建一个唯一的临时文件，且不用默认的umask值，会将文件的读写权限分配给文件属主，并设置为文件的属主，但其他人没法访问他</li></ul><h3 id="创建本地临时文件"><a href="#创建本地临时文件" class="headerlink" title="创建本地临时文件"></a>创建本地临时文件</h3><ul><li>mktemp name.XXXXXX # 在本地目录创建一个临时文件，模板名后加六个XXXXXX<ul><li>-t # 强制mktemp命令在系统的临时目录来创建该文件，此时会返回全路径</li><li>-d # 创建临时目录</li></ul></li></ul><h2 id="记录消息"><a href="#记录消息" class="headerlink" title="记录消息"></a>记录消息</h2><p>将输出同时发送到显示器和日志文件</p><ul><li>tee # 相当于管道的T形接口，指定STDOUT之外的文件名：<code>date | tee filename</code><ul><li>-a # tee使用时默认覆盖输出文件内容，使用-a追加文件</li></ul></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">outfile=my.sql</span><br><span class="line">IFS=&#x27;,&#x27;</span><br><span class="line">while read pname lname fname address city state zip;do</span><br><span class="line">    cat &gt;&gt; $file &lt;&lt; EOF</span><br><span class="line">    INSERT INTO members (pname,lname,fname,address,city,state,zip) VALUES</span><br><span class="line">(&#x27;$pname&#x27;,&#x27;$lname&#x27;,&#x27;$fname&#x27;,&#x27;$address&#x27;,&#x27;$city&#x27;,&#x27;$state&#x27;,&#x27;$zip&#x27;)</span><br><span class="line">EOF</span><br><span class="line">done &lt; $1</span><br></pre></td></tr></table></figure><p>上述脚本读取csv文件，创建INSERT语句将数据插入数据库<br>cat将标准输入数据标准输出，追加到文件，配合&lt;&lt;输入重定向使用</p><h1 id="控制脚本"><a href="#控制脚本" class="headerlink" title="控制脚本"></a>控制脚本</h1><h2 id="处理信号"><a href="#处理信号" class="headerlink" title="处理信号"></a>处理信号</h2><p>linux利用信号进行通讯，从而控制脚本操作</p><h3 id="复习linux进程信号"><a href="#复习linux进程信号" class="headerlink" title="复习linux进程信号"></a>复习linux进程信号</h3><ul><li>信号 名称 描述</li><li>1 SIGHUP 挂起</li><li>2 SIGINT 中断</li><li>3 SIGQUIT 结束运行</li><li>9 SIGKILL 无条件终止</li><li>11 SIGSEGV 段错误</li><li>15 SIGTERM 尽可能终止</li><li>17 SIGSTOP 无条件停止运行，但不终止</li><li>18 SIGTSTP 停止或者暂停，但继续在后台运行</li><li>19 SIGCONT 在STOP或TSTP之后恢复执行</li></ul><p>默认情况下bash会忽略收到的3、15，支持交互式shell，会处理1,2信号</p><ul><li>bash收到了1信号，比如要离开一个交互式shell，它就会退出<ul><li>退出前，将1信号传给所有的由该shell启动的进程，包括正在运行的shell</li></ul></li><li>bash收到2信号，可以中断shell，linux内核会停止为shell分配cpu处理时间<ul><li>这种情况发生时，会将2信号传给所有由它启动的进程</li></ul></li></ul><p>shell会将信号传给shell脚本程序处理，而默认行为是忽略这些信号，而不利于脚本的运行，需要加入识别信号的代码，并执行命令来处理信号</p><h3 id="生成信号"><a href="#生成信号" class="headerlink" title="生成信号"></a>生成信号</h3><h4 id="中断进程"><a href="#中断进程" class="headerlink" title="中断进程"></a>中断进程</h4><ul><li>ctrl+c 生成中断信号</li></ul><h4 id="暂停进程"><a href="#暂停进程" class="headerlink" title="暂停进程"></a>暂停进程</h4><ul><li>ctrl+z 生成18信号</li></ul><h3 id="捕获信号"><a href="#捕获信号" class="headerlink" title="捕获信号"></a>捕获信号</h3><ul><li>trap “echo test” SIGINT</li><li>trap ‘echo 欢迎下次再来’ EXIT</li></ul><h3 id="修改或者移除捕获"><a href="#修改或者移除捕获" class="headerlink" title="修改或者移除捕获"></a>修改或者移除捕获</h3><ul><li>修改捕获只需要在原有的代码之后重写即可，重写之前修改无效，重写后修改生效</li><li>trap – EXIT # 删除之前的<code>trap &#39;echo something&#39; EXIT</code>，单破折号也行</li></ul><h2 id="以后台模式运行脚本"><a href="#以后台模式运行脚本" class="headerlink" title="以后台模式运行脚本"></a>以后台模式运行脚本</h2><h3 id="后台运行脚本"><a href="#后台运行脚本" class="headerlink" title="后台运行脚本"></a>后台运行脚本</h3><p>在脚本后加&amp;即可，但仍会使用终端显示器来显示STDOUT和STDERR</p><p><strong>终端会话退出，后台进程也退出，如果想后台程序在登出控制台后继续运行，请看下集</strong></p><h2 id="在非控制台下运行脚本"><a href="#在非控制台下运行脚本" class="headerlink" title="在非控制台下运行脚本"></a>在非控制台下运行脚本</h2><ul><li>nohup command &amp; # nohup命令运行了另一个命令来阻断所有发送给该进程的SIGHUP信号，会在退出终端时阻止进程退出<ul><li>nohup会解除终端和进程的关联，终端stdout和stderr也不再和进程联系在一起为了保存该命令的输出，重定向到一个nohup.out中</li></ul></li></ul><h2 id="作业控制"><a href="#作业控制" class="headerlink" title="作业控制"></a>作业控制</h2><p>重启发送SIGCONT信号</p><p>启动，停止，终止以及恢复作业统称为作业控制</p><h3 id="查看作业"><a href="#查看作业" class="headerlink" title="查看作业"></a>查看作业</h3><ul><li>jobs # 查看shell当前正在处理的作业<ul><li>jobs -l # 查看pid以及作业号</li><li>jobs -n # 只列出上次shell发出通知后改变了的作业</li><li>jobs -p # 只列出作业的pid</li><li>jobs -r # 只列出运行中的作业</li><li>jobs -s # 只列出已停止的作业</li></ul></li></ul><p>jobs中的加号与减号：</p><ul><li>带加号的会被当做默认作业，在使用作业控制命令时，如果未在命令行中指定任何作业号，该作业就是操作对象</li><li>带减号的成为下一个默认作业</li><li>不管有多少在运行的作业，任何时候都只有一个带加号和一个带减号的作业</li></ul><h3 id="重启停止的作业号"><a href="#重启停止的作业号" class="headerlink" title="重启停止的作业号"></a>重启停止的作业号</h3><ul><li>bg n # n是作业号，方括号内的数字</li></ul><h2 id="调整谦让度"><a href="#调整谦让度" class="headerlink" title="调整谦让度"></a>调整谦让度</h2><p>内核负责将cpu时间分配给系统上运行的每个进程。调度优先级是内核分配给进程的cpu时间（相对于其他进程）。在linux中由shell启动的所有进程的调度优先级默认都是相同的</p><p>调度优先级是个整数值，从-20（最高优先级）到+19（最低优先级），bash默认情况下以优先级0来启动所有进程 # 便于记忆：好人难做哈哈</p><h3 id="nice命令"><a href="#nice命令" class="headerlink" title="nice命令"></a>nice命令</h3><ul><li>nice -n 10 .&#x2F;bash.sh &gt; bash.out &amp; # -n指定命令使用更低的优先级，使用10优先级<ul><li>-n 若使用其用于提高命令的优先级，命令作业运行了，但提高优先级的操作失败了</li><li>-n 可省略，示例修改之后的结果：<code>nice -10 ./bash.sh &gt; bash.out &amp;</code></li></ul></li></ul><h3 id="renice命令"><a href="#renice命令" class="headerlink" title="renice命令"></a>renice命令</h3><ul><li>renice -n 10 -p pid # 可以改变已运行命令的优先级<ul><li>只能对属于你的进程执行renice</li><li>只能通过renice降低进程的优先级</li><li>root用户可以通过renice来任意调整进程的优先级</li></ul></li></ul><h2 id="定时运行作业"><a href="#定时运行作业" class="headerlink" title="定时运行作业"></a>定时运行作业</h2><p>linux提供了多个在预选时间运行脚本的方法：at命令和cron表</p><h3 id="at命令来计划执行作业"><a href="#at命令来计划执行作业" class="headerlink" title="at命令来计划执行作业"></a>at命令来计划执行作业</h3><p>at命令允许指定linux系统何时运行脚本。at命令会将作业提交到队列中，指定shell何时运行该作业。at的守护进程atd会以后台模式运行，检查作业队列来运行作业。大多数linux在启动时运行此守护进程。</p><p>atd守护进程会检查系统上的一个特殊目录（通常&#x2F;var&#x2F;spool&#x2F;at）来获取at命令提交的作业。默认atd会每60秒检查一下这个目录。有作业时atd守护进程会检查作业设置运行的时间，如果时间跟当前时间匹配，atd守护进程就会运行此作业。</p><h4 id="at命令格式"><a href="#at命令格式" class="headerlink" title="at命令格式"></a>at命令格式</h4><ul><li><p>at [ -f filename ] time</p><ul><li>-f # 默认情况下at会将stdin的输入放入队列中，可以用f参数指定用于读取命令脚本文件</li><li>time # 指定了linux系统何时运行该作业。能识别多种不同的时间格式<ul><li>标准的小时分钟格式：11:11</li><li>AM&#x2F;PM指示符：11:11 PM</li><li>特定可命名时间，such as：now，noon，midnight，teatime（4 PM）</li><li>标准日期格式：MMDDYY，MM&#x2F;DD&#x2F;YY，DD.MM.YY</li><li>文本日期：Jul 4,Dec 5</li><li>指定时间增量<ul><li>当前时间+25min</li><li>明天10:15 PM</li><li>10:15+7天</li></ul></li></ul></li></ul></li><li><p>针对不同的优先级，存在26种不同的作业队列，作业队列通常用字母代指。</p></li><li><p>作业队列的字母排序越高，作业优先级越低（更高的nice值）。</p></li><li><p>默认情况下at的作业会提交到a作业队列，如果想以更高的优先级运行作业，可以使用-q参数指定不同的队列字母</p></li></ul><h4 id="获取作业的输出"><a href="#获取作业的输出" class="headerlink" title="获取作业的输出"></a>获取作业的输出</h4><ul><li>作业在linux上运行时，linux系统会将提交该作业的用户的电子邮件地址作为stdout和stderr。任何输出都会通过邮件系统发送给该用户。</li><li>at命令利用sendmail应用程序来发邮件，如果没有安装sendmail将不会有任何输出可以获得，在使用at时，最好在脚本中对stderr和stdout重定向。</li><li>如果不想使用邮件或者重定向，最好加上-M选项屏蔽作业产生的输出信息</li></ul><h4 id="列出等待的作业"><a href="#列出等待的作业" class="headerlink" title="列出等待的作业"></a>列出等待的作业</h4><ul><li>atq # 可以查看系统中有哪些作业在等待，显示作业号，系统运行作业日期时间以及所在作业队列</li></ul><h4 id="删除作业"><a href="#删除作业" class="headerlink" title="删除作业"></a>删除作业</h4><ul><li>atrm n # n为作业号，只能删除自己提交的</li></ul><h3 id="安排需要定期指定的脚本"><a href="#安排需要定期指定的脚本" class="headerlink" title="安排需要定期指定的脚本"></a>安排需要定期指定的脚本</h3><h4 id="cron时间表"><a href="#cron时间表" class="headerlink" title="cron时间表"></a>cron时间表</h4><p>格式如下：</p><p>min hour dayofmonth month dayofweek command</p><p>每个月最后一天执行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">00 12 * * * <span class="keyword">if</span> [`<span class="built_in">date</span> +%d -d tomorrow` = 01 ]; <span class="keyword">then</span> ; <span class="built_in">command</span></span><br></pre></td></tr></table></figure><ul><li>列出已有的时间表<ul><li><code>crontab -l</code></li></ul></li><li>浏览cron目录<ul><li><code>ls /etc/cron.*ly</code></li><li>如果脚本需要每天运行一次，将脚本复制到daily目录即可<ul><li>注意，脚本是使用run-parts命令执行的，run-parts会查找文件夹下所有可执行文件，并执行</li><li>所以脚本权限必须是可执行的，还有一点需要注意的是不能以<code>.sh</code>为后缀，否则也不执行</li><li><code>run-parts --test /etc/cron.daily</code>可用于测试，测试结果貌似有点问题</li></ul></li></ul></li><li>anacron程序<ul><li>cron程序的唯一问题是它假定Linux系统是7×24小时运行的。除非将Linux当成服务器环境来运行，否则假设未必成立</li><li>即该运行的时候，处于关机状态，作业将不会再执行。再开机也不会再运行。</li><li>anacron在错过作业后会尽快运行该作业</li><li>一般用于常规日志维护的脚本。</li><li>anacron只会处理cron目录的程序</li><li>用时间戳来决定作业是否在正确的计划间隔内运行了。时间戳文件位于<code>/var/spool/anacron</code></li><li>anacron程序使用自己的时间表来检查作业目录:<code>cat /etc/anacrontab</code></li><li>anacron时间表格式: period delay identifier command<ul><li>period 定义多久运行一次，以天为单位</li><li>delay 系统启动后需要等待多久后再开始运行错过的脚本</li><li>command 包含了run-parts程序和一个cron脚本目录名<ul><li>run-parts程序负责运行目录中传给它的任何脚本</li></ul></li><li>identifier 是一种特别的非空字符串，如 <code>cron-weekly</code> 用于唯一标示日志消息和错误邮件中的作业</li></ul></li><li><strong>anacron不会运行位于&#x2F;etc&#x2F;cron.hourly的脚本，因为anacron程序不会处理执行时间需求小于一天的脚本</strong></li></ul></li></ul><h1 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h1><h2 id="基本的脚本函数"><a href="#基本的脚本函数" class="headerlink" title="基本的脚本函数"></a>基本的脚本函数</h2><h3 id="创建函数-1"><a href="#创建函数-1" class="headerlink" title="创建函数"></a>创建函数</h3><p>使用关键字<code>function</code>创建函数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> name &#123;</span><br><span class="line">    commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者空括号声明函数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">    commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><ul><li>使用函数名调用函数</li><li>要在使用前定义函数</li><li>函数名必须唯一，否则会被新定义的函数覆盖，而不会有任何错误消息提示</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>bash shell 会把函数当做一个小型脚本，运行结束时会返回一个退出状态码，有三种不同的方法来生成函数退出状态码。</p><h3 id="默认退出状态码"><a href="#默认退出状态码" class="headerlink" title="默认退出状态码"></a>默认退出状态码</h3><p>默认情况下，函数的退出状态码是函数最后一条命令返回的退出状态码。可以使用<code>$?</code>来确定函数的退出状态码。</p><h3 id="使用return命令"><a href="#使用return命令" class="headerlink" title="使用return命令"></a>使用return命令</h3><p>return 命令注意事项</p><ul><li>函数一结束就要取出返回值，否则会被其他命令的返回值覆盖</li><li>退出状态码必须在0~255之间，否则都会产生一个错误值。</li></ul><h3 id="使用函数输出"><a href="#使用函数输出" class="headerlink" title="使用函数输出"></a>使用函数输出</h3><p><code>echo</code>命令输出结果，使用<code>$()</code>取值</p><p><code>read</code>命令的提示信息不会作为STDOUT输出的一部分内容，会忽略其中内容</p><h2 id="在函数中使用变量"><a href="#在函数中使用变量" class="headerlink" title="在函数中使用变量"></a>在函数中使用变量</h2><p>函数使用特殊环境变量作为自己的参数值，所以例如如下内容可在函数中使用：<code>$#</code> 参数个数 ,<code>$1</code>, …</p><h3 id="在函数中处理变量"><a href="#在函数中处理变量" class="headerlink" title="在函数中处理变量"></a>在函数中处理变量</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>默认情况下，在脚本中定义的任何变量都是全局变量。</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>函数内部在声明变量前面加上<code>local</code>关键字就可以声明成局部变量，不会影响全局变量中同名内容。</p><h2 id="数组变量和函数"><a href="#数组变量和函数" class="headerlink" title="数组变量和函数"></a>数组变量和函数</h2><p>第六章中讲过数组变量，觉得使用起来会有点麻烦，并没有使用过。</p><p>但是直接将数组作为参数传给函数会有问题，函数只会读取第一个值</p><h3 id="向函数传递数组参数"><a href="#向函数传递数组参数" class="headerlink" title="向函数传递数组参数"></a>向函数传递数组参数</h3><p>必须将数组变量的值分解成单个的值，再传参。</p><h3 id="从函数返回数组"><a href="#从函数返回数组" class="headerlink" title="从函数返回数组"></a>从函数返回数组</h3><p>函数使用<code>echo</code>语句按顺序输出单个数组值，然后脚本再将他们重新放进一个新的数组变量中。</p><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><p>函数支持递归调用</p><h2 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h2><p>与环境变量一样，shell函数仅在定义它的shell会话内有效。</p><p>函数库的关键在于<code>source</code>命令，该命令会在当前shell上下文中执行命令，而不是创建一个新的shell。</p><p><code>source</code>命令有一个快捷的别名，称作<code>点操作符</code>：<code>. ./file</code></p><h2 id="在命令行上使用函数"><a href="#在命令行上使用函数" class="headerlink" title="在命令行上使用函数"></a>在命令行上使用函数</h2><h3 id="在命令行上创建函数"><a href="#在命令行上创建函数" class="headerlink" title="在命令行上创建函数"></a>在命令行上创建函数</h3><p>如果你给函数起了一个与内建命令或另一个命令相同的名字，函数将会覆盖原来的命令。</p><h3 id="在-bashrc中定义函数"><a href="#在-bashrc中定义函数" class="headerlink" title="在.bashrc中定义函数"></a>在.bashrc中定义函数</h3><h4 id="直接定义函数"><a href="#直接定义函数" class="headerlink" title="直接定义函数"></a>直接定义函数</h4><p>直接在文件中追加函数即可</p><h4 id="读取函数文件"><a href="#读取函数文件" class="headerlink" title="读取函数文件"></a>读取函数文件</h4><p>使用<code>source</code>命令或者点操作符将库文件中的函数添加到你的<code>.bashrc</code>脚本中</p><h1 id="图形化桌面环境中的脚本编程"><a href="#图形化桌面环境中的脚本编程" class="headerlink" title="图形化桌面环境中的脚本编程"></a>图形化桌面环境中的脚本编程</h1><h2 id="创建文本菜单"><a href="#创建文本菜单" class="headerlink" title="创建文本菜单"></a>创建文本菜单</h2><h3 id="创建菜单布局"><a href="#创建菜单布局" class="headerlink" title="创建菜单布局"></a>创建菜单布局</h3><p><code>clear</code>命令用当前终端会话的terminfo数据来清理出现在屏幕上的文本。</p><p><code>echo -e &quot;1.\tcontent&quot;</code>             -e 选项打印非可打印字符<br><code>echo -en &quot;\t\tenter option:&quot;</code>      -n 选项去除回车<br><code>read -n 1 option</code>                  -n 限制只读取一个字符</p><h3 id="创建菜单函数"><a href="#创建菜单函数" class="headerlink" title="创建菜单函数"></a>创建菜单函数</h3><p>shell菜单选项作为一组独立的函数实现起来更为容易，能够创建出简洁，准确，容易理解的case命令。</p><p>通常我们会为还没有实现的函数先创建一个桩函数。桩函数是一个空函数，或者只有一个<code>echo</code>语句，说明最终这里需要什么内容。demo:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> diskspace &#123;</span><br><span class="line">    clear</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;This is what it is&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> menu &#123;</span><br><span class="line">    clear</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\tTest Menu\n&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t1. xxxxxxx&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t2. xxxxxxx&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t3. xxxxxxx&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t4. xxxxxxx&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;\t\tEnter option: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> -n 1 option</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加菜单逻辑"><a href="#添加菜单逻辑" class="headerlink" title="添加菜单逻辑"></a>添加菜单逻辑</h3><p>典型菜单中<code>case</code>的用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">0)</span><br><span class="line">    <span class="built_in">break</span> ;;</span><br><span class="line">1)</span><br><span class="line">    diskspace ;;</span><br><span class="line">2)</span><br><span class="line">    whoseon ;;</span><br><span class="line">3)</span><br><span class="line">    memusage ;;</span><br><span class="line">*)</span><br><span class="line">    clear</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Sorry wrong selection&quot;</span> ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="整合shell脚本菜单"><a href="#整合shell脚本菜单" class="headerlink" title="整合shell脚本菜单"></a>整合shell脚本菜单</h3><p>你可能发现，大部分代码在用于建立菜单布局和获取用户输入了</p><p>可以使用<code>select</code>命令创建，然后获取输入的答案并自动处理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select option <span class="keyword">in</span> <span class="string">&quot;content1&quot;</span> <span class="string">&quot;content2&quot;</span> <span class="string">&quot;conten3&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;content1&quot;</span>)</span><br><span class="line">        <span class="built_in">break</span> ;;</span><br><span class="line">    <span class="string">&quot;content2&quot;</span>)</span><br><span class="line">        commands ;;</span><br><span class="line">    <span class="string">&quot;content3&quot;</span>)</span><br><span class="line">        commands ;;</span><br><span class="line">    *)</span><br><span class="line">        clear</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Sorry, wrong option.&quot;</span> ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="图形化脚本编程"><a href="#图形化脚本编程" class="headerlink" title="图形化脚本编程"></a>图形化脚本编程</h1><p>P376~P400</p><h2 id="制作窗口"><a href="#制作窗口" class="headerlink" title="制作窗口"></a>制作窗口</h2><h1 id="sed-amp-gawk"><a href="#sed-amp-gawk" class="headerlink" title="sed&amp;gawk"></a>sed&amp;gawk</h1><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><h3 id="sed编辑器"><a href="#sed编辑器" class="headerlink" title="sed编辑器"></a>sed编辑器</h3><p>流编辑器，会在编辑器处理数据之前基于预先提供的一组规则来编辑数据流。</p><ul><li>一次从输入中读取一行数据</li><li>根据所提供的编辑器命令匹配数据</li><li>按照命令修改流中的数据</li><li>将新的数据输出到STDOUT</li></ul><p>sed命令格式：<code>sed options script file</code></p><ul><li><code>-e script</code>在处理输入时，将script中指定的命令添加到已有的命令中</li><li><code>-f file</code>在处理输入时，将file中指定的命令添加到已有的命令中</li><li><code>-n</code>不产生命令输出，使用print命令来完成输出</li></ul><h4 id="在命令行定义编辑器命令"><a href="#在命令行定义编辑器命令" class="headerlink" title="在命令行定义编辑器命令"></a>在命令行定义编辑器命令</h4><p><code>echo &quot;test sed for demo&quot; | sed &quot;s/test/Test/&quot;</code> 该sed编辑器使用了s命令</p><h4 id="在命令行使用多个编辑器命令"><a href="#在命令行使用多个编辑器命令" class="headerlink" title="在命令行使用多个编辑器命令"></a>在命令行使用多个编辑器命令</h4><p>可以使用<code>-e</code>执行多个命令:<code>echo &quot;test sdfl sdf &quot; | sed -e &quot;s/s/st/g; s/test/AAAA/&quot;</code> 或者<code>echo &quot;test sdfl sdf &quot; | sed -e &quot;s/s/st/g&quot; -e &quot;s/test/AAAA/&quot;</code> 命令有先后顺序</p><h4 id="从文件中读取编辑器命令"><a href="#从文件中读取编辑器命令" class="headerlink" title="从文件中读取编辑器命令"></a>从文件中读取编辑器命令</h4><p>可以使用<code>-f</code>指定命令文件:<code>sed -f script.sed data.txt</code></p><h3 id="gawk程序"><a href="#gawk程序" class="headerlink" title="gawk程序"></a>gawk程序</h3><p>gawk是awk程序的GUN版本。</p><ul><li>定义变量来保存数据</li><li>使用算术和字符串操作符来处理数据</li><li>使用结构化编程概念来为数据处理增加处理逻辑</li><li>通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告</li></ul><p>gawk命令格式：<code>gawk potions program file</code></p><ul><li><code>-F</code> 指定行中划分数据字段的字段分隔符</li><li><code>-f</code> 从指定的文件中读取程序</li><li><code>-v</code> 定义gawk程序中的一个变量及其默认值</li><li><code>-mf</code> 指定要处理的数据文件中的最大字段数</li><li><code>-mr</code> 指定数据文件中的最大数据行数</li><li><code>-W</code> 指定gawk的兼容模式或警告等级</li></ul><h4 id="从命令行中读取程序脚本"><a href="#从命令行中读取程序脚本" class="headerlink" title="从命令行中读取程序脚本"></a>从命令行中读取程序脚本</h4><p>gawk使用花括号定义程序脚本：<code>gawk &#39;&#123;print &quot;Hello World.&quot;&#125;&#39;</code></p><h4 id="使用数据字段变量"><a href="#使用数据字段变量" class="headerlink" title="使用数据字段变量"></a>使用数据字段变量</h4><p>gawk的主要特性之一就是其处理文本文件中数据的能力。它会自动给一行中的每个数据元素分配一个变量。</p><ul><li><code>$0</code> 代表整个文本行</li><li><code>$n</code> 代表文本行中的第n个数据字段</li></ul><p>默认的字段分隔符是任意的空白字符（空格或者制表符）</p><h4 id="在程序脚本中使用多个命令"><a href="#在程序脚本中使用多个命令" class="headerlink" title="在程序脚本中使用多个命令"></a>在程序脚本中使用多个命令</h4><p>在命令之间添加分号即可</p><h4 id="从文件中读取程序"><a href="#从文件中读取程序" class="headerlink" title="从文件中读取程序"></a>从文件中读取程序</h4><p>使用<code>-f</code>选项即可，程序文件一行为一个命令，不需要分号。</p><h4 id="在处理数据前运行脚本"><a href="#在处理数据前运行脚本" class="headerlink" title="在处理数据前运行脚本"></a>在处理数据前运行脚本</h4><p>gawk在读取数据前执行<code>BEGIN</code>关键字后指定的程序脚本，然后用第二段脚本处理文本数据：<code>echo &quot;content content&quot; | gawk &#39;BEGIN &#123;print &quot;title&quot;&#125; &#123;print $0&#125; &#39;</code></p><h4 id="在处理数据后运行脚本"><a href="#在处理数据后运行脚本" class="headerlink" title="在处理数据后运行脚本"></a>在处理数据后运行脚本</h4><p>相应的有<code>END</code>关键字指定的程序脚本在处理本文数据结束后执行：<code>echo -e &quot;test test\ncontent content&quot; | gawk &#39;BEGIN &#123;print &quot;title&quot;&#125; END &#123;print $1&#125; &#123;print $0&#125;&#39;</code></p><h2 id="sed编辑器基础"><a href="#sed编辑器基础" class="headerlink" title="sed编辑器基础"></a>sed编辑器基础</h2><h3 id="更多的替换选项"><a href="#更多的替换选项" class="headerlink" title="更多的替换选项"></a>更多的替换选项</h3><h4 id="替换标记"><a href="#替换标记" class="headerlink" title="替换标记"></a>替换标记</h4><p><code>s/pattern/replacement/flags</code></p><ul><li>数字，表明新文本将替换第几处模式匹配的地方</li><li>g，表明新文本将会替换所有匹配的文本</li><li>p，表明原先行的内容要打印出来<ul><li>通常会与<code>sed</code>的<code>-n</code>选项一起使用<ul><li><code>-n</code>选项将禁止sed编辑器输出，但p替换标记会输出修改过的行。配合使用的效果就是只输出被替换命令修改过的行。</li><li><code>echo -e &quot;test line\nanother test line&quot; | sed -n &#39;s/another/this is another/p&#39;</code></li></ul></li></ul></li><li>w file，将替换的结果写到文件中</li></ul><p>可同时使用多个标记</p><h4 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h4><p>有时候字符中可能包含<code>/</code>符号，这时需要转义符，这样会影响可读性。此时可以使用别的符号作为字符串分隔符：<code>echo &quot;te/st&quot; | sed &#39;s!/!//!g&#39;</code>。而不用使用复杂的：<code>echo &quot;te/st&quot; | sed &#39;s/\//\/\//g&#39;</code></p><h3 id="使用地址"><a href="#使用地址" class="headerlink" title="使用地址"></a>使用地址</h3><p>如果想将命令作用于特定行或某些行，则必须使用行寻址。</p><p>格式：<code>[address]command</code>或者将特定地址的多个命令分组：<code>address &#123; command1 command2 command3&#125;</code></p><ul><li>以数字形式表示行区间</li><li>用文本模式来过滤出行</li></ul><h4 id="数字方式的行寻址"><a href="#数字方式的行寻址" class="headerlink" title="数字方式的行寻址"></a>数字方式的行寻址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;2s/dog/cat/g&#x27;</span> data.txt  <span class="comment"># 作用于第二行</span></span><br><span class="line">sed <span class="string">&#x27;2,3s/dog/cat/g&#x27;</span> data.txt  <span class="comment"># 作用于第二行到第三行</span></span><br><span class="line">sed <span class="string">&#x27;2,$s/dog/cat/g&#x27;</span> data.txt  <span class="comment"># 作用于第二行到之后的所有行</span></span><br></pre></td></tr></table></figure><h4 id="使用文本模式过滤器"><a href="#使用文本模式过滤器" class="headerlink" title="使用文本模式过滤器"></a>使用文本模式过滤器</h4><p>格式：<code>/pattern/command</code></p><p>允许使用正则表达式，demo:<code>sed -n &#39;/roo./s/bash/csh/p&#39; /etc/passwd</code>，for compare:<code>cat /etc/passwd | grep &quot;roo.&quot;</code></p><h4 id="命令组合"><a href="#命令组合" class="headerlink" title="命令组合"></a>命令组合</h4><p>使用<code>address &#123; command1 command2 command3&#125;</code>格式即可</p><p>经测试该格式下貌似只能使用数字方式寻址：<code>sed -n &#39;1&#123;s/bash/csh/p;s/bin/test/p&#125;&#39; /etc/passwd</code></p><h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><p>sed ‘d’ file.suffix<br>sed d file.suffix</p><h4 id="行寻址删除"><a href="#行寻址删除" class="headerlink" title="行寻址删除"></a>行寻址删除</h4><p>sed ‘4d’ file<br>sed ‘2,4d’ file<br>sed ‘3,$d’ file</p><h4 id="模式匹配删除"><a href="#模式匹配删除" class="headerlink" title="模式匹配删除"></a>模式匹配删除</h4><p>sed ‘&#x2F;pattern 1&#x2F;d’ file</p><p>sed ‘&#x2F;pattern1&#x2F;,&#x2F;pattern2&#x2F;d’ file #从模式1所在行删除至模式2所在行，多次，若模式2不存在，删除到底</p><p><strong>源文件不会变</strong></p><h3 id="插入和附加文本"><a href="#插入和附加文本" class="headerlink" title="插入和附加文本"></a>插入和附加文本</h3><p>insert:i # 前插<br>append:a # 后加</p><p>$sed ‘3i<br>insert line1<br>insert line2’ file</p><h3 id="修改行"><a href="#修改行" class="headerlink" title="修改行"></a>修改行</h3><p>change:c # 将某行内容修改为指定内容（可为多行）</p><p>若行寻址为范围，则将范围内所有行修改为指定内容<br>$sed ‘3,5c<br>changed line’ file</p><p>$sed ‘3c<br>changed line1<br>changed line2’ file</p><p>支持匹配修改行<br>$sed ‘&#x2F;pattern&#x2F;c<br>changed line’ file</p><h3 id="转换命令"><a href="#转换命令" class="headerlink" title="转换命令"></a>转换命令</h3><p>transform:y # 字符映射</p><p>sed ‘y&#x2F;123&#x2F;456’ file</p><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>p:打印文本行<br>&#x3D;:打印行号<br>l:列出行</p><p>-n:禁止输出其他行</p><p>sed -n ‘&#x2F;pattern&#x2F;p’ file<br>sed -n ‘2,10p’ file</p><p>$sed -n ‘&#x2F;3&#x2F;{<br>p<br>s&#x2F;line&#x2F;test&#x2F;p<br>}’ file</p><h1 id="查找带3的行先打印，再打印替换内容"><a href="#查找带3的行先打印，再打印替换内容" class="headerlink" title="查找带3的行先打印，再打印替换内容"></a>查找带3的行先打印，再打印替换内容</h1><h1 id="sed-n-‘-x2F-pattern-x2F"><a href="#sed-n-‘-x2F-pattern-x2F" class="headerlink" title="$sed -n ‘&#x2F;pattern&#x2F;{"></a>$sed -n ‘&#x2F;pattern&#x2F;{</h1><p>p<br>}’ file</p><h1 id="查找内容，打印行号和内容"><a href="#查找内容，打印行号和内容" class="headerlink" title="查找内容，打印行号和内容"></a>查找内容，打印行号和内容</h1><p>l:打印数据流中的文本和不可打印的ASCII字符，制表符-&gt;‘\t’ 换行符-&gt;’$’, 控制铃声-&gt;’\a’等</p><h3 id="处理文件-1"><a href="#处理文件-1" class="headerlink" title="处理文件"></a>处理文件</h3><p>w</p><p>sed ‘1,4w test.txt’ file # 可以配合-n不打印出来<br>sed ‘&#x2F;pattern&#x2F;w test.txt’ file</p><p>r</p><p>sed ‘3r test.txt’ file # 读file读到第三行时将test.txt读入<br>sed ‘&#x2F;pattern&#x2F;r test.txt’ file<br>sed ‘$r test.txt’ file # 在数据流末尾读入</p><p>$sed ‘&#x2F;List&#x2F;{<br>r input.txt<br>d<br>}’ file</p><h1 id="将file中占位符List处读入文件input，再删除，实现字符到文件的替换"><a href="#将file中占位符List处读入文件input，再删除，实现字符到文件的替换" class="headerlink" title="将file中占位符List处读入文件input，再删除，实现字符到文件的替换"></a>将file中占位符List处读入文件input，再删除，实现字符到文件的替换</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赖床不起</title>
      <link href="/2021/12/04/tattle/2021-12-4/"/>
      <url>/2021/12/04/tattle/2021-12-4/</url>
      
        <content type="html"><![CDATA[<iframe width=550 height=350 src="/img/cat/sleep.mp4" frameborder=0 allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>舐爹情深</title>
      <link href="/2021/11/24/tattle/2021-11-24/"/>
      <url>/2021/11/24/tattle/2021-11-24/</url>
      
        <content type="html"><![CDATA[<iframe width=350 height=450 src="/img/cat/lick.mp4" frameborder=0 allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古有愚公移山，精卫填海，今有宝子扒书</title>
      <link href="/2021/10/23/tattle/2021-10-23/"/>
      <url>/2021/10/23/tattle/2021-10-23/</url>
      
        <content type="html"><![CDATA[<p>非得把书扒拉掉完才算满意吧</p><iframe width=350 height=500 src="/img/cat/shelf.mp4" frameborder=0 allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2021/08/01/books/2021-8-1/"/>
      <url>/2021/08/01/books/2021-8-1/</url>
      
        <content type="html"><![CDATA[<p><em>月初打卡，半年没读书了。继续读书吧！</em></p><p>愿有人陪你颠沛流离，如果没有，愿你成为自己的太阳。——卢思浩</p><ul><li>灯塔<ul><li>还阔以</li></ul></li><li>家人闲坐，灯火可亲<ul><li>日记一样，好无聊</li></ul></li><li>独居的一年<ul><li>刚开始看～</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2021/01/24/books/2021-1-24/"/>
      <url>/2021/01/24/books/2021-1-24/</url>
      
        <content type="html"><![CDATA[<ul><li>优雅<ul><li>讲女人如何优雅，写得很全，特别希望有一本对应的《绅士》</li></ul></li><li>六根岛<ul><li>开头精彩，中间恐怖，结尾无趣</li></ul></li><li>万叶集<ul><li>抱歉，没有文学底蕴，从头到尾看不懂</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/12/24/books/2020-12-24/"/>
      <url>/2020/12/24/books/2020-12-24/</url>
      
        <content type="html"><![CDATA[<p>自从雪季开了，就没打过卡了，补上！</p><ul><li>一个陌生女人的来信<ul><li>很好看，用女人的视角，讲述一个渣男</li></ul></li><li>将死未死的青<ul><li>嗯，不做评价</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/09/29/books/2020-9-29/"/>
      <url>/2020/09/29/books/2020-9-29/</url>
      
        <content type="html"><![CDATA[<ul><li>Opus<ul><li>开头创意很棒，很好看，好吧，也只是开头好看</li></ul></li><li>我要快乐，不必正常<ul><li>因为没有看过前传《橘子不是唯一的水果》所以很多东西不知道在讲什么</li></ul></li><li>撒野<ul><li>男人，哦不，男生的友情（中间总以为有基情ahhh，不过还挺好看的，两个小男生）</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/09/01/books/2020-9-1/"/>
      <url>/2020/09/01/books/2020-9-1/</url>
      
        <content type="html"><![CDATA[<ul><li>呼吸<ul><li>凑合，就第一章节有点意思</li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/best-weather.jpeg" alt="昨天下午最佳摄像"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/07/26/books/2020-7-26/"/>
      <url>/2020/07/26/books/2020-7-26/</url>
      
        <content type="html"><![CDATA[<ul><li>有人在周围走动<ul><li>奇怪的小说集，挺好看</li></ul></li><li>人鼠之间<ul><li>见怪不怪了，还可以</li></ul></li><li>窄门<ul><li>读的时候总想起挪威的森林，让人很无奈</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/06/25/books/2020-6-25/"/>
      <url>/2020/06/25/books/2020-6-25/</url>
      
        <content type="html"><![CDATA[<ul><li>游戏<ul><li>一般</li></ul></li><li>21岁以及我的余生<ul><li>这个月最好看的！一个患癌少年自传</li></ul></li><li>人生十二法则<ul><li>哦</li></ul></li><li>那些听过却从未搞明白的问题<ul><li>和《如果没有今天，明天会不会有昨天》一样好看，一本是科学，一本是哲学</li></ul></li><li>绿山墙的安妮<ul><li>听说好看，但我看不进去，不是俺的菜</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/05/29/books/2020-5-29/"/>
      <url>/2020/05/29/books/2020-5-29/</url>
      
        <content type="html"><![CDATA[<ul><li>解忧包子铺<ul><li>补上个月的，还行，包子铺版大冰</li></ul></li><li>局外人<ul><li>没看懂，并怀疑买了本假书</li></ul></li><li>时光边缘的男人<ul><li>挺好看的</li></ul></li><li>傲慢与偏见<ul><li>怎么感觉略俗气，应该是在当时的社会环境下，比较动人，也能我没啥内涵吧，毕竟现在也有不少人喜欢</li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/window.jpeg" alt="深夜租房的窗外风景"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/03/30/books/2020-3-30/"/>
      <url>/2020/03/30/books/2020-3-30/</url>
      
        <content type="html"><![CDATA[<ul><li>月亮与六便士<ul><li>为了使灵魂安宁，一个人每天至少该做两件他不喜欢的事<ul><li>通过夸张的极端化故事，放大理想和现实的冲突，增强感受，令人回味</li><li>滑雪，对于我来说，是对平凡生活的浪漫抗议。爱自己，是一生浪漫的开始。</li></ul></li></ul></li><li>今天也想表白你2</li><li>挪威的森林<ul><li>挺好看，不一样的故事</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/02/29/books/2020-2-29/"/>
      <url>/2020/02/29/books/2020-2-29/</url>
      
        <content type="html"><![CDATA[<ul><li>小小小小的火</li><li>无人生还</li></ul><p>这两本都还可以，但也是还可以哈哈。<br>最近发现个app，每天有读书推荐，还不错：</p><div class="fj-gallery"><p><img src="/./img/books/app-1.jpeg" alt="app-1"><br><img src="/./img/books/app-2.jpeg" alt="app-2"><br><img src="/./img/books/app-3.jpeg" alt="app-3"><br><img src="/./img/books/app-4.jpeg" alt="app-4"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/01/31/books/2020-1-31/"/>
      <url>/2020/01/31/books/2020-1-31/</url>
      
        <content type="html"><![CDATA[<ul><li>一句顶一万句<ul><li>挺有意思的故事序列集</li></ul></li><li>因为是你<ul><li>看了三分之一看不下去了</li></ul></li><li>留学的一年<ul><li>很好看，很棒。附图如下～</li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/one-year.jpeg" alt="留学的一年"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2020/01/01/books/2020-1-1/"/>
      <url>/2020/01/01/books/2020-1-1/</url>
      
        <content type="html"><![CDATA[<ul><li>绝对小孩1&#x2F;2&#x2F;3</li><li>清单人生<ul><li>一本让我明白了为什么有那么多人支持本地球队的书<ul><li>支持了什么样的球队代表你是什么样的人</li><li>像我这种什么球队都不支持的人，是什么样纸滴尼</li></ul></li><li><strong>希望被原谅的人才没有权利选择原谅与否</strong></li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/snapshot.jpeg" alt="snapshot"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/12/02/books/2019-12-2/"/>
      <url>/2019/12/02/books/2019-12-2/</url>
      
        <content type="html"><![CDATA[<p>好吧，本月的书单其实都不咋好看。</p><ul><li>伊比库斯的语言</li><li>死者在说话<ul><li>法医作者，只是科普的话，还挺好看的。</li><li>不过我并不喜欢这些内容，不是因为死者，而是因为叙事方式平平无奇，太枯燥，换种方式，应该会很喜欢看。</li></ul></li><li>带着鲑鱼去旅行</li></ul><div class="fj-gallery"><p><img src="/./img/books/app-5.jpeg" alt="app-5"><br><img src="/./img/books/app-6.jpeg" alt="app-6"><br><img src="/./img/books/app-7.jpeg" alt="app-7"><br><img src="/./img/books/app-8.jpeg" alt="app-8"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/10/29/books/2019-10-29/"/>
      <url>/2019/10/29/books/2019-10-29/</url>
      
        <content type="html"><![CDATA[<h2 id="blank"><a href="#blank" class="headerlink" title="blank"></a><em>blank</em></h2><p>这个月一直在出差，什么书都没读完。</p><hr><p>好吧我不找借口了，这个月太懒了</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/09/29/books/2019-9-29/"/>
      <url>/2019/09/29/books/2019-9-29/</url>
      
        <content type="html"><![CDATA[<ul><li>散步去<ul><li>一般般吧</li></ul></li><li>消失的搭车客<ul><li>不好看，辣鸡推荐🐔</li></ul></li><li>无声告白<ul><li>这个还行</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>告别</title>
      <link href="/2019/09/17/books/byebye/"/>
      <url>/2019/09/17/books/byebye/</url>
      
        <content type="html"><![CDATA[<p>后来才知道，人生的很多告别，都悄无声息。<br>坐上一班地铁，走过某个街角，就消失不见。<br>多年过去，心里不放的，其实是你还欠我的那个告别。</p>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
            <tag> tattle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/08/28/books/2019-8-28/"/>
      <url>/2019/08/28/books/2019-8-28/</url>
      
        <content type="html"><![CDATA[<p>这个月的都还挺好看的，尤其是悲惨自传小说…</p><ul><li>喵呜，原来你是这种汪</li><li>房思琪的初恋乐园</li><li>时光倒流的女孩</li><li>十四行诗</li><li>无声告白<ul><li>还没看完</li></ul></li></ul><hr><p>从逼自己看书已有一年啦！不知不觉居然已经看了这么多乱七八糟的书了～</p><div class="fj-gallery"><p><img src="/./img/books/first-year.jpeg" alt="第一年看的书"></p>          </div><hr><h1 id="十四行诗"><a href="#十四行诗" class="headerlink" title="十四行诗"></a>十四行诗</h1><p>《诗经·卫风·硕人》：“手如柔荑，肤如凝脂，领如蝤（qiú）蛴（qí），齿如瓠（hù）犀（xī），螓首蛾眉，巧笑倩兮，美目盼兮！”</p><p>手指纤纤如嫩荑，皮肤白皙如凝脂，美丽脖颈像蝤蛴，牙如瓠籽白又齐，额头方正眉弯细。微微一笑酒窝妙，美目顾盼眼波俏。</p><h2 id="赏析编辑"><a href="#赏析编辑" class="headerlink" title="赏析编辑"></a>赏析编辑</h2><p>《硕人》写春秋时代卫庄公夫人庄姜从齐国嫁到卫国时的盛况。这七句诗集中描述庄姜美丽的容貌。七句中有五句用比喻，有六句用排比。通过一连串的比喻和排比，使形象更为逼真传神，如一幅栩栩如生的美人图。吴闿生《诗义会通》集旧评云：“手如五句状其貌，末二句并及性情，生动处《洛神》之蓝本也。”后来诗词中描写美女常用这些比喻，即源于此。</p><h2 id="原作"><a href="#原作" class="headerlink" title="原作"></a>原作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">硕人其颀，衣锦褧衣。齐侯之子，卫侯之妻，东宫之妹，邢侯之姨，谭公维私。</span><br><span class="line">手如柔荑，肤如凝脂，领如蝤蛴，齿如瓠犀，螓首蛾眉，巧笑倩兮！美目盼兮！</span><br><span class="line">硕人敖敖，说于农郊。四牡有骄，朱帏镳镳，翟茀以朝。大夫夙退，无使君劳。</span><br><span class="line">河水洋洋，北流活活。施罘岁岁，鱣鲔发发，葭菼揭揭。庶姜孽孽，庶士有竭。</span><br></pre></td></tr></table></figure><h2 id="部分词语解释："><a href="#部分词语解释：" class="headerlink" title="部分词语解释："></a>部分词语解释：</h2><ul><li>蝤蛴：qiúqí 天牛的幼虫。天牛科。黄白色,身长足短,呈圆筒形。蛀食树木枝干,是森林、桑树和果树的主要害虫。借以比喻妇女脖颈之美。</li><li>瓠:hù 一年生草本植物,爬蔓,夏开白花,果实长圆形,嫩时可吃。如①瓠齿：整齐、洁白的牙齿。②瓠肥：又白又胖。③瓠脯：干菜的一种，即瓠子干。④瓠犀：瓠瓜的子。因排列整齐,色泽洁白,所以常用来比喻美人的牙齿，也作瓠栖。</li><li>螓:qín 蝉的一种。体小,方头,广额而有文彩。如，①螓首：妇人的额头,方广如螓。②螓首蛾眉：额广而眉弯。用以形容妇人容貌的美丽。</li><li>倩:①含笑的样子。②士之美称。③泛指姿容美好。</li><li>盼：本义:眼睛黑白分明的样子</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/07/30/books/2019-7-30/"/>
      <url>/2019/07/30/books/2019-7-30/</url>
      
        <content type="html"><![CDATA[<ul><li>海错图笔记</li><li>不想和你谈人生，只想和你谈恋爱</li><li>ZOO<ul><li>虽然是恐怖短篇小说集，还是推荐下哈，很好看～</li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/cartoon.jpeg" alt="cartoon"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/07/01/books/2019-7-1/"/>
      <url>/2019/07/01/books/2019-7-1/</url>
      
        <content type="html"><![CDATA[<p>这个月比较。。。颓？只看了一本…</p><ul><li>我遇见了人类</li></ul><p><strong>对地球人的建议</strong></p><ul><li>不要老想着扮冷扮酷。整个宇宙已经够冷了。真正宝贵的是温暖的东西。</li><li>每个人都是一出喜剧。如果有人笑话你，他们只是不明白他们笑话的是他们自己。</li><li>如果你可以活一千年之久，那么你所知道的一切都将被证明为错误。</li><li>没有两套道德体系正好匹配的。接受不同形状的道德吧，只要他们不会尖锐如伤人的刀锋。</li><li>你母亲爱你父亲，尽管她假装不爱。</li><li>服从你的大脑。服从你的心。服从你的血性。总而言之，服从除命令之外的一切。</li><li>保持活力。这是你对这个世界应尽的最高义务。</li><li>礼貌常常等于恐惧。友善往往等于勇气。但关爱却使你富有人性。</li><li>在大脑中，把每一天的名称改为星期六，然后再把工作的名称改为嬉戏。</li><li>如果你觉得某件事物很丑陋，不妨仔细多看看。丑陋只是因为没有看见美。</li></ul><p><strong>人类指南</strong></p><ul><li>抱负<ul><li>一种因缺乏父母关爱或同辈群体接纳而导致的欲求不满的状态</li></ul></li><li>焦虑<ul><li>思考导致的必然结果</li></ul></li><li>外表<ul><li>别人会对你加以评判的东西</li></ul></li><li>美<ul><li>人类可以在任何地方发现美，美只是一种使他们意识到人生短暂的提醒</li></ul></li><li>职业<ul><li>一种老掉牙的就业理念</li></ul></li><li>文明<ul><li>人类聚集在一起压抑本能的结果</li></ul></li><li>衣服<ul><li>要想被他人接受，就必须找个套子把自己装起来，穿衣就是最好的方式</li></ul></li><li>放荡<ul><li>一种因热爱享乐，缺乏内疚而产生的行为</li><li>人类是一种会死的物种，所以他们喜欢新事物或极古老的事物。年代久远的时候，有助于他们相信永恒，而新事物则可以帮助他们相信自己的大脑。</li></ul></li><li>抑郁<ul><li>一种传染病，智商高于平均水平的所有人类最重要走向的必然归宿。</li></ul></li><li>梦<ul><li>心之所至，行之所往的人就不需要的东西</li></ul></li><li>恶<ul><li>阻碍他人打成自私目标的自私行为</li></ul></li><li>小说<ul><li>看起来像谎言的真相</li></ul></li><li>自由<ul><li>更大的牢笼</li></ul></li><li>朋友<ul><li>会告诉你真相的人</li></ul></li><li>未来<ul><li>和现在差不多</li></ul></li><li>天才<ul><li>把家庭以及正式教育提供的每一张虚假地图都通通扔在一边，自行寻找出路的人(但我觉得这种说法不太合适)</li></ul></li><li>头发<ul><li>人类相互判断对方之社会价值的方式</li></ul></li><li>荣誉<ul><li>一种一钱不值的东西</li></ul></li><li>希望<ul><li>无论种种证据表示绝无可能，也始终相信会有正面的结果。</li></ul></li><li>伪君子<ul><li>人类的同义词</li></ul></li><li>想象<ul><li>自由唯一的立足之地</li></ul></li><li>知识<ul><li>一种稀缺商品</li></ul></li><li>生活<ul><li>貌似真实的谎言</li></ul></li><li>爱<ul><li>弥补无法永生的东西</li></ul></li><li>记忆<ul><li>过往经历触发的幻觉</li></ul></li><li>遗忘<ul><li>一种幸福的思维状态</li></ul></li><li>耐心<ul><li>无声的愤怒</li></ul></li><li>进步<ul><li>最流行的人类神话</li></ul></li><li>满足<ul><li>一种不可能实现的状态</li></ul></li><li>羞怯<ul><li>人类最大的残疾</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孤独</title>
      <link href="/2019/06/06/books/alone/"/>
      <url>/2019/06/06/books/alone/</url>
      
        <content type="html"><![CDATA[<ul><li>这一栏要填。</li><li>填什么？</li><li>填自己配偶。</li><li>离婚了。</li><li>父母呢？</li><li>很小的时候就去世了。</li><li>兄弟姐妹呢？</li><li>独生子，就我一个。</li><li>填子女也行。</li><li>没有孩子。</li><li>那七大姑八大姨表兄弟姐妹也可以。</li><li>男子摇摇头：都没有，我是孤儿。</li></ul><p>办事员之后就一直没说话，那个男子办完事转身的时候，我看到他的眼睛红红的。</p>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/05/29/books/2019-5-29/"/>
      <url>/2019/05/29/books/2019-5-29/</url>
      
        <content type="html"><![CDATA[<p>这个月看的书真的一个比一个好看啊！！！！！！开心ヽ(○^㉨^)ﾉ♪</p><ul><li>分成两半的子爵</li><li>因为你，我爱上了这个世界</li><li>蓝色小药丸<ul><li>艾滋病患者的绘本故事，很棒，看完让人更容易对患者理解，包容，接纳；确实起到了书创作出发点的作用。</li></ul></li><li>真相</li></ul><h1 id="真相"><a href="#真相" class="headerlink" title="真相"></a>真相</h1><p>人生就是一次漫长坠落的过程，最重要的就是要学会跌倒。</p><p>当需要斟词酌句的时候你却不假思索。</p><p>爱情这件事情很复杂，非常复杂。这可能是最美妙的事情，也可能是最坏的事情。你将会知道的。爱情有可能会让人很难受。但是你千万不要害怕尝试，特别是不要害怕坠入爱河，因为爱情同样可以是很美好的，和其他一切美好的事情一样，它能将你诱惑，也能让你伤心欲绝。这也是为什么我们通常在相爱之后会痛哭流涕的原因。</p><p>要想知道你爱一个人爱得有多深的唯一办法就是，失去这个人。</p><p>生活本没有太多意思，我们却可以赋予生活意义。其实赋予的意义，更加的虚无缥缈不是么，只是人们为了给自己活着的劲头增添一丝肯定而已。我才不要做这种虚伪的人。</p><hr><p>强烈推荐一本书，若埃尔迪克的《真相》，结局反转至少七次，高潮部分占整书的四分之一，一个比一个惊人，相比而言，看不见的客人这部经典佳作可以说只称得上饭前甜点，东野的书只能算花毛双拼。强推强推强推！！！看完的时候凌晨三点半[捂脸][捂脸]太好看了，这本书去年是绝版的，最近看到可以买了。推荐！！！表示是看完了电子书以后再买的实体书来收藏一下（*&#x2F;∇＼*）有时间一定要重读一遍，真的是太好看了啊[捂脸][捂脸]</p><p>读小说为的就是各种铺垫之后的意外转折带来的双臂起鸡皮疙瘩的那一刻——忘了是谁说的了|･ω･｀)<br>而这本书，每次回想起来就全身鸡皮疙瘩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玛格丽特小镇</title>
      <link href="/2019/05/13/books/ma-ge-li-te-town/"/>
      <url>/2019/05/13/books/ma-ge-li-te-town/</url>
      
        <content type="html"><![CDATA[<p>你在一个地方认识的人，定义了那个地方对你的意义</p><p>每个地方都喜欢在你初来乍到之时卖力讨好，然而到了离别时刻却难免冷冷清清，有时当你离开一个地方，你甚至都不知道自己已经离开了。</p><p>对初恋的执念从来都是跟对象无关，都是人们对自己的怀念。</p><p>有些地方没看懂，可能因为尚未经历。</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/03/31/books/2019-3-31/"/>
      <url>/2019/03/31/books/2019-3-31/</url>
      
        <content type="html"><![CDATA[<ul><li>罗生门</li><li>在世界和我之间</li><li>柒(文珍)<ul><li><strong>递纸巾是一种提醒别再哭了的粗暴暗示</strong></li><li>寂寞就像水龙头被一圈圈拧紧，流水只剩一丝乃至于彻底断掉</li><li>心想事成或许是另一种人生悲哀，因为得到了也未见得是自己想要的</li><li>过分理性自律，永远无法纵情投入任何日常场景</li><li>别这样。我们都还只是年轻人。别放松，世界没那么豪无指望。虽然不那么尽如人意，也别太早看到头。一切都会有转机，相信自己，你可以的。——心理医生安全的职业性安慰</li><li>已是深秋了，夜风冰凉。他的话被大风撕碎了飘散一空，挺入耳的却句句刺心。</li><li>错误结束，只为了另一个错误重新开始。风后面是风。 谁又不是靠前途活着的。如果迢迢前路，也不过是随时可能变质的爱，朝九晚五的工作，婚姻，房子，一两个跑来跑去的小孩</li><li>永远是这样，风后面是风，天空上面是天空，道路前面还是道路。——海子的诗</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/02/28/books/2019-2-28/"/>
      <url>/2019/02/28/books/2019-2-28/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每个月至少读两本书的flag，在持续了大半年后。终于第一次嗝屁了。</p></blockquote><hr><p>读书打卡。。。这个月。。。没读任何书😷 新书到货👻 去年剩下的第一日和罗生门还没看完😷 肯定是因为滑雪[捂脸]雪季过了，一切要恢复正常了😷 (平均一个月两本肯定有，所以flag不算倒得太厉害吧|･ω･｀)</p><div class="fj-gallery"><p><img src="/./img/books/new-book.jpeg" alt="新书到货"><br><img src="/./img/books/sister-1.jpeg" alt="小姐姐"><br><img src="/./img/books/sister-2.jpeg" alt="小姐姐"><br><img src="/./img/books/sister-3.jpeg" alt="小姐姐"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2019/02/03/books/2019-2-3/"/>
      <url>/2019/02/03/books/2019-2-3/</url>
      
        <content type="html"><![CDATA[<p>上个月忘了打卡了。。。。整天沉迷滑雪，想不起来读书[捂脸][捂脸]</p><blockquote><p>上个月看完了别人推荐的悟空传。觉得就是一小说。YY的废话， 没必要看，不推荐</p></blockquote><ul><li>人间失格<ul><li>喜欢的一本，但不推荐的一本书，就不报书名了，如此真实，没体验过绝对写不出这种感觉。</li><li>为何最近看的书作者全都英年自杀了[哈欠][哈欠]</li><li>这个人是个猫吧，第十次自杀终于成功了</li></ul></li><li>草间居游<ul><li>蛮有意思的。</li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/tai-zai-zhi.jpeg" alt="太宰治"></p>          </div><h1 id="人间失格"><a href="#人间失格" class="headerlink" title="人间失格"></a>人间失格</h1><p>胆小鬼，甚至会惧怕幸福，碰到棉花也会受伤。有时也会被幸福所伤。</p><p>世上所有人的说法，总是显得转弯抹角，含糊不清，其中有一种试图逃避责任似的微妙性和复杂性。对于他们那种近于徒劳无益的防范心理和无数的小小计谋，我总是感到困惑不已，最后只得听之任之，随他而去。要么我以滑稽的玩笑来敷衍塞责，要么我用无言的首肯来得过且过，总之我采取的是一种败北者的消极态度。</p><p>我总是被一种空荡荡的说感所裹挟，恍若整个胸膛快要打开一个窟窿。</p><p>在行善时，必须随时心存歉意，因为没有什么比行善更刺伤人的了。</p><p>我总喜欢开玩笑，这大概是因为内心的烦恼太多，不得不强装出表面的快乐吧！不单在家里是如此，就连与他人接触时，不管心里多么痛苦，身体多么疲惫，也会尽力营造出一种愉快的氛围。而每当与人分手后，我早已累得步履蹒跚。在悲伤抑郁的时候，我反倒会竭力去创作一些轻松愉快的故事。</p><p>更何况对于争论，我历来就像对待斗殴一样厌恶无比。</p><p>人活在这世上，真是件不容易的事，到处都有枷锁来束缚住你，哪怕是稍微动一下，也会冒出血来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2018/12/30/books/2018-12-30/"/>
      <url>/2018/12/30/books/2018-12-30/</url>
      
        <content type="html"><![CDATA[<p>18年最后一次打卡，这个月开的书很多，看完的倒没几个，这个月有点滑雪哈哈</p><ul><li>审判上帝<ul><li>这个广告真不戳</li></ul></li><li>first love,last rites<ul><li>这本书可真变态(▼皿▼#)作者不亏叫恐怖伊恩。不过还挺好看，难道说我也是个变态？</li></ul></li><li>今日店休<ul><li>还不错，书还是要读的</li></ul></li><li>方向<ul><li>这本没看太明白，晕乎乎的。。</li></ul></li><li>罗生门</li><li>第一日</li><li>悟空传<ul><li>只看了一半，还没看完，暂不评价</li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/god-is-a-girl.jpeg" alt="God is a girl"></p>          </div><h1 id="第一日"><a href="#第一日" class="headerlink" title="第一日"></a>第一日</h1><p>人永远也摆脱不了童年的回忆。他们就像鬼魂一样，等到你成年以后，时不时跳出来纠缠你。</p><p>回忆既懒惰又自欺欺人，留下的都是最好的或者最坏的经历，印象最强烈的景象，被抹去的则是日常生活中的点点滴滴。</p><p>人生的某些日子里，总会有一些微不足道的小事让你感到异常幸福，把你的生活照亮。</p><p>总有一些日子看似平淡无奇，却能让我们回味良久，即便当时我们自己可能并没有意识到。</p><p>人生总有那么一些日子，发生的看似都是一些微不足道的小事，却已在你的记忆深处留下了波澜。而在那些孤独的时刻，你将会久久地，永远地回味。</p><p>在你的生命中，是否也有这样的时刻，经历了幸福，就不再有他求？如果你现在只会谈起以前发生的事，追忆过去的时光，而且还试图用笑声来掩饰自己的怀旧和忧伤，这是否代表着你正在垂垂老去？</p><p>我一直觉得很奇妙的是，这个世界上总有一些看起无关紧要的小事，他们凑在一起就能决定我们人生的命运。当拼图一块块组合起来的时候，谁也无法预见，这样的进程最终将使我们的生活发生怎样天翻地覆的变化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>男人的温柔</title>
      <link href="/2018/12/06/books/gentle/"/>
      <url>/2018/12/06/books/gentle/</url>
      
        <content type="html"><![CDATA[<p>男人的温柔从不是体贴入微善解人意，对美女不分单身婚恋皆行谄媚之色的是“暖男”，对弱者不分男女老少皆行举手之劳的是绅士。男人的温柔是实力，是自恋到了一定程度，对众生都心怀爱怜</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
            <tag> tattle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2018/11/29/books/2018-11-29/"/>
      <url>/2018/11/29/books/2018-11-29/</url>
      
        <content type="html"><![CDATA[<p>月底打卡，排名依照好看顺序_(:з」∠)_</p><hr><ul><li>岛上书店</li><li>番茄爱上西红柿</li><li>第七日<ul><li>人死之后的头七</li></ul></li><li>在这世界的角落</li><li>窝在角落很安心</li></ul><h2 id="岛上书店-the-storied-life-of-A-J-FIKRY"><a href="#岛上书店-the-storied-life-of-A-J-FIKRY" class="headerlink" title="岛上书店 the-storied-life-of-A.J.FIKRY"></a>岛上书店 the-storied-life-of-A.J.FIKRY</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">独自生活的难处，在于不管弄出什么样的烂摊子，都不得不自己清理。</span><br><span class="line">不，独自生活的真正难处在于没人在乎你是否心烦意乱。没人在乎为什么一个三十九岁的老男人会像一个蹒跚学步的小孩子那样，把一盘咖喱肉扔到房间那头。</span><br></pre></td></tr></table></figure><p>没有谁是一座孤岛，每本书都是一个世界。</p><p>他认为该有一个解释。如果第一幕中出现了一把枪，那把枪最好在第三幕中开火。</p><p>这其中最令人恼火的是，一旦一个人在乎一件事，就发现自己不得不开始在乎一切事。</p><p>生活中每一桩糟糕事，几乎都是时机不当的结果，每件好事，都是时机恰到好处的结果。</p><p>没有人会漫无目的的旅行，那些迷路者是希望迷路。</p><p>好的婚姻，至少有一部分是阴谋。</p><p>因为从心底里害怕自己不值得被爱，我们独来独往。然而就是因为独来独往，才让我们以为自己不值得被爱。有一天，你不知道是什么时候，你会驱车上路。有一天，你不知道是什么时候，你会遇到他（她）。你会被爱，因为你今生第一次真正不再孤单。你会选择不再孤单下去。</p><p>要是有谁觉得你在一屋子人中是独一无二的，就选那个人吧。</p><p>一个人无法成为孤单。</p><p>掌握了怎样写短篇小说，你就掌握了整个世界。</p><p>得了癌症，意思就是还能活三集电视剧或者两年那么久</p><h1 id="番茄爱上西红柿"><a href="#番茄爱上西红柿" class="headerlink" title="番茄爱上西红柿"></a>番茄爱上西红柿</h1><p>我们终于长大到足以去守护我们想要的东西，可惜，那个东西不见了。你只能站在它丢的那个地方说，对不起，我回来晚了。</p><p>长大后，才知道那是怦然心动，知道无关爱情，却守护了好多年。那时候叫青春，现在叫过往。</p><p>我们太把爱情当回事儿，以至于，我们开始害怕孤独。</p><p>喜欢是开在心里的蒲公英，光阴是一场没有目的地的风，风一起，连根拔起，风一停，旧事不提。</p><p>喜欢是情绪，而爱是一种能力。</p><p>我们都像一只没有写邮寄地址的包裹，等着一个地址给我们名分，偏偏那个地址叫做永无乡。我们拼尽全力想要一个答案，最后不过一句，查无此人。</p><p>犹记得冬天的风，它没有吹醒正在冬眠的我，就变成了二月的剪刀，我摊开手是包袱，剪刀赢了包袱，我输的一塌糊涂。</p><p>这不过是你人生里无数次的坎里最微不足道的一个，等你下一次遇见一个姑娘，又会火力全开，嘴上说的不会再爱，但是身体很诚实。你无数次地收起触角怕被伤害，但也会无数次地摇尾巴告诉对方你有多喜欢她。爱，本来就是一件不知死活的事儿。</p><p>张爱玲说，那爱情卑微能低到尘埃里开出花。我见过那朵花开，昙花一现，却闪耀了我整个一生。</p><p>有些喜欢比爱更舒服，再遇见，酒满上，你先说。</p><p>那个时候的感觉不叫爱情，是喜欢，是气场一样的两朵花开，是风来了一起被吹跑的两朵云，两个人很聊得来，没法先张口说爱的那种互生喜欢。</p><p>说爱你不过是耳边的一阵风，最多也就暖和那么一下，还比不过手捧的一碗热稀饭更带感。</p><p>充分切必要，有且仅有。</p><p>记住一个人的好，是不足以经营一场婚姻的，反而，吵过一次架才能看清一个人的人品。</p><p>从此以后，星星不眨眼，我黯然无光，只陪月亮说话。往后的日子，知道风会说话，树会说话，而我不知道再遇见还能跟你说点啥。</p><p>往前走，条条大路甩开腮帮子吃，回头看，只有剩饭。</p><p>人生有很多很多的分水岭，你永远不知道哪一个岭，就隔断了所有的念想。</p><h1 id="第七日"><a href="#第七日" class="headerlink" title="第七日"></a>第七日</h1><p>他们的闲言碎语对于她只是无需打伞的稀疏雨点。</p><p>我在情感上的愚钝就像是门窗紧闭的屋子，虽然爱情的脚步在屋前走过来又走过去，我也听到了，可是我觉得那是路过的脚步，那是走向别人的脚步。直到有一天，这个脚步停留在这里，然后门铃响了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A perfect life，is a perfect lie.</title>
      <link href="/2018/11/26/books/a-perfect-life/"/>
      <url>/2018/11/26/books/a-perfect-life/</url>
      
        <content type="html"><![CDATA[<p>完美生活，即完美谎言。</p><p>起初看到这句话时，我并不认同。甚至持反对意见，这句话将人间真善美置于何地，全都是虚伪和假面，人生岂不只是在演戏。</p><p>后来，发现自己太过于片面。</p><p>有些事，真善美并不能站得住脚。生活总是要继续的，有些事，就像中彩票般降临。推不得，抹不去，唯有承受。听起来，生活貌似是难以避免的凄凄惨惨戚戚呢。</p><p>这种噩梦，如若可通过，谎言般的骗局，遮盖生活中的丑陋。你又将会怎么选择呢？</p>]]></content>
      
      
      <categories>
          
          <category> 日常碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tattle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生无大事</title>
      <link href="/2018/11/25/books/matter/"/>
      <url>/2018/11/25/books/matter/</url>
      
        <content type="html"><![CDATA[<p>人生总有一些日子看似平淡无奇，却能让我们回味良久，即便当时我们自己可能并没有意识到。总有那么一些日子，发生的看似都是一些微不足道的小事，却已在你的记忆深处留下了波澜。而在那些孤独的时刻，你将会久久地，永远的回味。</p><p>这个世界上总有一些看起无关紧要的小事，他们凑在一起就能决定我们人生的命运。当拼图一块块组合起来的时候，谁也无法预见，这样的进程最终将使我们的生活发生怎样天翻地覆的变化。</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2018/10/28/books/2018-10-28/"/>
      <url>/2018/10/28/books/2018-10-28/</url>
      
        <content type="html"><![CDATA[<p>距离月底还有三天，应该看不完下一本书了。嗯打卡，介是这个月读完的书[嘿哈]好评顺序从左到右依次降低</p><ul><li>画的秘密</li><li>一个叫欧维的男人决定去死</li><li>窗边的小豆豆<ul><li>看了嗝嗝老师，想起了小豆豆的老师小林宗作，又想到了学生时代闯的祸。在此感谢天线宝宝的照顾(❁´ω&#96;❁)muaヽ(<em>´з｀</em>)ﾉ</li></ul></li><li>我可以咬一口吗</li><li>你今天真好看</li><li>所以一切都是童年的错吗</li><li>黄金时代</li><li>no wifi</li><li>心的重建</li></ul><div class="fj-gallery"><p><img src="/./img/books/punch-1.jpeg" alt="打卡"></p>          </div><h1 id="心的重建–you-can-heal-your-heart"><a href="#心的重建–you-can-heal-your-heart" class="headerlink" title="心的重建–you can heal your heart"></a>心的重建–you can heal your heart</h1><h2 id="Start-tasting"><a href="#Start-tasting" class="headerlink" title="Start tasting"></a>Start tasting</h2><p>刚开始看这本书，就觉得这本书对于目前的自己来说，好像并没有什么太大的意思，只是一本鸡汤书而已。本着开卷的原则，会尽可能去读完它。</p><p>再来说说其中的这样引起离婚的一句话::</p><pre><code>只是在我还未了解到生命有多长，有多少事要去做时，我就给出了一辈子的承诺。</code></pre><p>想想也是啊，人生二三十岁其实才刚刚在社会泥潭中蹒跚前行。思想和观念(三观)依然有可能是会发生巨大的改变，更何况心智成熟的旅途要求我们终其一生都要打破和重塑自我(见《the road less traveled》)。aha，爱情这玩意，还是扑朔迷离啊，略略略。也许我们本来就应该不计后果，或者说，痛苦和幸福是相互依存，不可能独立存在的，不要妄求爱情的果实美味，果实只是用来填饱肚子的。</p><p>或许，现在我的有些悲观一些吧。</p><h2 id="book"><a href="#book" class="headerlink" title="book"></a>book</h2><p>接下来说说书中的内容吧。库伯勒-罗斯提出的伤痛五阶段：</p><ul><li>否认</li><li>生气</li><li>挣扎</li><li>抑郁</li><li>接受</li></ul><h2 id="trod-again"><a href="#trod-again" class="headerlink" title="trod again"></a>trod again</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问一些未来可能会发生也可能不会发生的问题是没有意义的，因为未来的幸福根本不存在。</span><br><span class="line">活在当下，活在现实。</span><br><span class="line">如果我们的想法集中在别人身上而不是我们自己身上，那么我们永远不会找到幸福。</span><br></pre></td></tr></table></figure><p>自律者，见其过而内自讼者。self-examination for whole journey.</p><h2 id="fix-my-emotion"><a href="#fix-my-emotion" class="headerlink" title="fix my emotion"></a>fix my emotion</h2><p>多多少少会让读者面对生活时，更关注自身，看得更开。</p><h2 id="against"><a href="#against" class="headerlink" title="against"></a>against</h2><p>文章中很多观点，我都比较反对。人活着的存在感来源于精神，宗教是某些人的精神信仰。为了身心更舒服，而放弃了自己坚持的宗教信仰未免也太苟且偷生了吧。人家想怎么过，哪怕过的痛苦，你有什么理由批判别人的选择。</p><p>在自责这场博弈中，没人能赢，没人能达到平静。</p><h1 id="一个叫欧维的男人决定去死"><a href="#一个叫欧维的男人决定去死" class="headerlink" title="一个叫欧维的男人决定去死"></a>一个叫欧维的男人决定去死</h1><p>对欧维来说，是即是，非即费。他是个非黑即白的男人。她是色彩，他的全部色彩。</p><p>这是一个还没过期就已经过时的世界。</p><p>肥肉晃悠悠的从胸脯一直长到膝盖，看上去就像一大桶冰淇淋融化后又冻了起来。</p><p>不管忙着生存还是死亡，我们都必须继续走下去。</p><p>因为嘈杂的闲聊会淹没他对她声音的记忆。</p><p>紧接着的沉默厚重得经得起刀劈斧凿。</p><p>爱上一个人就像搬进一座房子，一开始你会爱上新的一切，陶醉于拥有它的每一个清晨，就好像害怕会有人突然冲进房门指出这是个错误，你根本不该住得那么好。但经年累月房子的外墙开始陈旧，木板七翘八裂。你会因为它本该完美的不完美而渐渐不再那么爱它。然后你渐渐谙熟所有的破绽和瑕疵。天冷的时候，如何避免钥匙卡在锁孔里，哪块地板踩上去的时候容易弯曲，怎么打开一扇橱门又恰好可以不让它嘎吱作响。这些都是会赋予你归属感的小秘密。</p><p>悲伤是一桩奇怪的事。</p><h1 id="黄金时代"><a href="#黄金时代" class="headerlink" title="黄金时代"></a>黄金时代</h1><p>在没有月亮的静夜，星星的眼泪洒在铃子身上，就像荧光粉。我走进星星的万花筒，没有人能告诉我我在何处，没人能告诉我我是什么人，直到入睡，我心里还带着一丝迷茫。</p><p>人生是一条寂寞的路，愿你有一本有趣的书来消磨旅途。</p><h1 id="越洋情书节选"><a href="#越洋情书节选" class="headerlink" title="越洋情书节选"></a>越洋情书节选</h1><p>波伏娃</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我渴望能见你一面</span><br><span class="line"></span><br><span class="line">但请你记得</span><br><span class="line"></span><br><span class="line">我不会开口要求见你</span><br><span class="line"></span><br><span class="line">这不是因为骄傲</span><br><span class="line"></span><br><span class="line">你知道我在你面前毫无骄傲可言</span><br><span class="line"></span><br><span class="line">而是因为</span><br><span class="line"></span><br><span class="line">唯有你也想见我的时候</span><br><span class="line"></span><br><span class="line">我们见面才有意义</span><br></pre></td></tr></table></figure><h1 id="如果没有今天，明天会不会有昨天"><a href="#如果没有今天，明天会不会有昨天" class="headerlink" title="如果没有今天，明天会不会有昨天"></a>如果没有今天，明天会不会有昨天</h1><p>据统计临终者最懊悔的五件事：<br>希望可以过自己的人生，不要那么投入工作，可以表露自己的感受，维持友谊，以及追求更多的幸福。</p><p>取得事物会让人满足，但是持有不会。<br>比如，六个月后，加薪或者中彩票的幸福感就会过去。</p><p>消费是新的宗教。</p><p>期待的快乐是最大的快乐。</p><p>我们为什么渴望幸福。成功的人生从来不是达成目的的手段，而是我们一切作为的最终目的。</p><p>轨道，疾病</p><p>让内心不能平静的，从来都不是外在的事物，而是我们对事物的看法和判断。</p><p>不要把任何可以从我们手中夺走的东西视为有价值。</p><p>我们一生都被自身的需求与爱好驱寒，满足了一个就急忙赶向下一个，人生就是一场无休止地追赶。这一个需求一旦得到满足，下一个需求就又开始酝酿。而在空窗期间，这个需求满足了，下一个需求还没出现的时候，我们会感到极度的无聊。人生仿佛一只悬吊的钟摆，在痛苦和无聊之间来回摆荡。<br>同样的，王尔德说过，人生只有两种悲剧，一种是人无法得其所欲，另一种则是他得到了。</p><p>幸福不过是痛苦的阙如。</p><p>人生是一场激烈的过山车，它囊括了过山车的一切元素，速度，刺激，嫉妒的恐惧，剧烈的欢欣，甚至还有呕吐，而一旦飞车抵达终点，就代表你得重头再搭一次。</p><p>意识到人生的荒谬性，才能找到自由，和人生的意义。</p><p>Whatever does not kill me ,make me stronger.出自初信叔本华的悲观主义，后自建乐观主义的尼采</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2018/10/15/books/hua-de-mimi/"/>
      <url>/2018/10/15/books/hua-de-mimi/</url>
      
        <content type="html"><![CDATA[<ul><li>只有短短42页！！超好看！！突然发现和上个月看到的超好看的《sens》是同一个作者，真是个奇才<blockquote><p>42页的书居然卖54，当初要是知道只有42页可能就不会买了。</p></blockquote></li><li>绝对可以拍电影！！！</li></ul><div class="fj-gallery"><p><img src="/./img/books/picture-secret.jpeg" alt="画的秘密"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2018/09/28/books/2018-9-28/"/>
      <url>/2018/09/28/books/2018-9-28/</url>
      
        <content type="html"><![CDATA[<p>距离上次立一年看至少24本书的flag还差一天就一个月整了。这个月看完了这些书【图一】</p><p>美滋滋，还有几本在看的。豆瓣评分还是挺靠谱的。洗个澡接着看。希望明年之前能看完图二的书【图二】 占剩下未读书目的一大半[捂脸]</p><div class="fj-gallery"><p><img src="/./img/books/first-punch.jpeg" alt="第一次打卡"><br><img src="/./img/books/first-punch-2.jpeg" alt="图二"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天才在左，疯子在右</title>
      <link href="/2018/09/27/books/genius-left-idot-right/"/>
      <url>/2018/09/27/books/genius-left-idot-right/</url>
      
        <content type="html"><![CDATA[<p>这本书，看了，害怕，恐惧，不可深思</p><p>与精神病接触多了很有可能就也活出“自我”来了</p><p>但是我们仍应该尽可能的以不同的角度，看我们所身处的这“世界”</p><h2 id="朝生暮死"><a href="#朝生暮死" class="headerlink" title="朝生暮死"></a>朝生暮死</h2><p>有一节，叫朝生暮死，讲的是作者精神分裂有了四个人格，朝生暮死，用来解决自己精神“平衡问题”的。</p><p>每天早上一切都是新生</p><p>不管今天一天有多糟糕，今晚必死。如果有明天，必定重生。</p><p>虽然会有回忆</p><p>一切都是过去式了，就像旅行一般。过去的永远是过去的状态了</p><h2 id="角度问题"><a href="#角度问题" class="headerlink" title="角度问题"></a>角度问题</h2><p>人们，我们，大部分都被这世界骗了，人人都知道地球是圆的，人人都知道各种这样那样的“定理”，“常识”。</p><p>我们习以为常的都是别人告诉我们的，我们却深以为然。所有的那些我们笼统知道的东西，我们现在如此的深信不疑。</p><p>我们看待事物，看待问题，都是用客观“认知”去理解。</p><p>孩子的本能才得以显示出其特别之处</p><p>很难想象小时候的看法，小时候的生活方式了。就成了人们口中的长大了。</p><p>每个人都会长大，当你接触的人都丢失掉儿童本能的时候，你也会失去这个能力。</p><p>曾经有段时间，一直一直想回到过去的心态，总觉得若有所失，看来，我应该也已经被逼长大了呢。</p><p><strong>我不想长大，却不得不长大。</strong></p><h2 id="棋子"><a href="#棋子" class="headerlink" title="棋子"></a>棋子</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我坚信所有的历史，所有的辉煌，绝对不是聪明人创造出来的，都是普通人创造出来的。而聪明人需要做的只是看清问题所在，顺应一个潮流罢了。</span><br><span class="line"></span><br><span class="line">除非，那个聪明人可以承担自己的聪明和才华。</span><br></pre></td></tr></table></figure><h2 id="谁是谁"><a href="#谁是谁" class="headerlink" title="谁是谁"></a>谁是谁</h2><p>最后一段对话，怎么都看不懂。。。。</p><h2 id="果冻世界"><a href="#果冻世界" class="headerlink" title="果冻世界"></a>果冻世界</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">精神，强大到可以改变肉体，反而受制于肉体。</span><br><span class="line"></span><br><span class="line">如果没有那种承受能力和辨析能力，最好什么宗教都不要信，否则信什么都是会出事的。</span><br></pre></td></tr></table></figure><h2 id="人生若只如初见"><a href="#人生若只如初见" class="headerlink" title="人生若只如初见"></a>人生若只如初见</h2><p>看书的时候觉得，这辈子都不要接触精神病人，以免受影响。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面对未知没必要害怕，而是要学会尊重未知的存在。其实，那也是对自己存在的尊重。给自己一个尝试去了解，辨析的机会，也就才有思考和探索的可能。</span><br></pre></td></tr></table></figure><p>所以如果有机会接触那些不足以承担自身才华的聪明人（“精神病”“患者”），不妨通过他们的眼睛看看这世界。正如看书之前的心态一样，体验所有想到的想不到的经历：极尽生活</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
            <tag> tattle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睡不着</title>
      <link href="/2018/09/26/books/unsleep/"/>
      <url>/2018/09/26/books/unsleep/</url>
      
        <content type="html"><![CDATA[<p>晚安，这世界 汪！</p><div class="fj-gallery"><p><img src="/./img/books/unsleep-1.jpeg" alt="睡不着1"><br><img src="/./img/books/unsleep-2.jpeg" alt="睡不着2"><br><img src="/./img/books/unsleep-3.jpeg" alt="睡不着3"><br><img src="/./img/books/unsleep-4.jpeg" alt="睡不着4"><br><img src="/./img/books/unsleep-5.jpeg" alt="睡不着5"><br><img src="/./img/books/unsleep-6.jpeg" alt="睡不着6"><br><img src="/./img/books/unsleep-7.jpeg" alt="睡不着7"><br><img src="/./img/books/unsleep-8.jpeg" alt="睡不着8"><br><img src="/./img/books/unsleep-9.jpeg" alt="睡不着9"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>所以，一切都是童年的错吗？</title>
      <link href="/2018/09/21/books/So/"/>
      <url>/2018/09/21/books/So/</url>
      
        <content type="html"><![CDATA[<p>很不错的一本书，解答了我一个待解很久很久的疑惑。人的性格，或者说人对外的表现形式，自己可不可以有意识的改变。<br>人和人之间的关系，没有感觉到的那么简单。<br>之前总觉得完全没必要在乎别人的感受，做自己就好。别人喜欢你，关你屁事。讨厌你，又关你屁事。<br>不过，人和人相处，总要建立在互相的感受，哪怕是无关人举手投足间透露对你看法，也会互相影响。哪怕人的犁鼻器高度退化，还是有各种感知方式能起到类似的作用。<br>当然，如果不在乎建立新的人际关系，我行我素好像也不需要考虑太多吧，作为一个程序猿，我好像也没多少生人需要打交道的哈哈😂😂[捂脸][捂脸]</p><hr><p>自我坚定是一种非常重要的“为自己主张”的个人品质::</p><ul><li>对自己的权利有充分的了解。</li><li>能够自由地表达自己的感觉，想法和需求，也会尊重他人的正常需求。</li><li>能够鲜明的表达反对，也能够承认错误并道歉。</li><li>能够自如的开始，扭转和结束对话。</li><li>无论是否正在与人争吵，都愿意聆听别人的想法，并且做出适当回应。</li><li>认为自己和别人处在平等的地位，可以发起并维持和他人的良好关系。</li><li>在必要的时候，能够对不公正的，没有意义的规则表达质疑。</li><li>能够很好的控制和管理情绪，但并不是抑制情绪。</li></ul><p>好的事情总会到来。而当它来晚时，也不失为一种惊喜。——《托斯卡纳艳阳下》</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
            <tag> tattle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纳兰词集</title>
      <link href="/2018/09/06/books/NaLanRongRuo-%E7%BA%B3%E5%85%B0%E8%AF%8D%E9%9B%86/"/>
      <url>/2018/09/06/books/NaLanRongRuo-%E7%BA%B3%E5%85%B0%E8%AF%8D%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="梦江南"><a href="#梦江南" class="headerlink" title="梦江南"></a>梦江南</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">昏鸦尽，小立恨因谁？急雪乍翻香阁絮，轻风吹到胆瓶梅，心字已成灰。</span><br><span class="line"></span><br><span class="line">昏鸦：指黄昏时分的鸦群。</span><br><span class="line">小立：稍稍站立。</span><br><span class="line">胆瓶：瓶颈细长，而瓶肚扩大的花瓶。</span><br></pre></td></tr></table></figure><h3 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h3><p>黄昏的鸦群已经飞远，你为何还独自站在那里，又是因何事而伤感呢？柳絮像急雪一样翻飞着落入香阁，晚风轻轻地吹拂着花瓶里盛开着的梅花。再看那心字香，早已悄然成灰。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>这首词是写在纳兰性德的表妹谢氏被选到宫里之后。作者与表妹谢氏一块长大，从小青梅竹马，两小无猜，虽然没有挑明爱情关系，但纳兰性德深深地爱着谢氏，所以在她走入深宫之后，才会痛苦得无以复加，为此写下这首词。</p><p>此词以女子口吻写的闺情词。是作女子口吻，写闺情闺怨。一个少女，在寒鸦归巢的黄昏，独立在窗边思念心上人。柳絮像急促的雪花般飘落到香阁里，黄昏的轻风吹拂着瓶中的梅花。不觉间心字香已经烧完，化成了灰烬。短短数语，一个俏丽的闺中少女思念情郎的失落形象已经跃然浮现眼前。</p><p>“心字”一词指的是古时的心字香，是以香末索篆成心字形，熏香的一种。此处纳兰暗喻少女久盼情郎不至，心灰意冷的感受。</p><h1 id="赤枣子"><a href="#赤枣子" class="headerlink" title="赤枣子"></a>赤枣子</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">惊晓漏，护春眠。格外娇慵只自怜。</span><br><span class="line">寄语酿花风日好，绿窗来与上琴弦。</span><br><span class="line"></span><br><span class="line">惊晓漏：意谓清晓，漏声将人惊醒，但却依然贪睡。</span><br><span class="line">娇慵：指刚刚睡醒惺忪妩媚的样子。</span><br><span class="line">酿花：催花开放。</span><br><span class="line">上琴弦：代指弹琴。</span><br></pre></td></tr></table></figure><h3 id="译文-1"><a href="#译文-1" class="headerlink" title="译文"></a>译文</h3><p>清晨，滴漏声将春睡的佳人惊醒，但佳人却依然贪睡。娇慵倦怠又暗生自怜。寄语给那催促鲜花盛开的和风丽日，到我的绿窗边上来与我一起拨弄琴弦。</p><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><p>据说，这首词是写在纳兰性德的表妹雪梅被选到宫里之后。他与表妹雪梅一块长大，从小青梅竹马，两小无猜，虽然没有挑明爱情关系，但纳兰深深地爱着雪梅这是事实。他与表妹曾经一块去读私塾，一块儿玩耍，一块儿对作赋。如今，表妹走了，走进了皇宫，当了妃子。一场早期的恋爱就这样成了泡影。表妹走后，纳兰曾经装扮成僧人进宫去见过表妹一面。匆匆一面，而且还隔着宫廷里的帏幔。他经常一个人在黄昏时小立，望着宫廷的方向凝神，初恋是彻底没有希望了，这辈子也别再想与表妹雪梅见一面了。</p><h1 id="忆王孙"><a href="#忆王孙" class="headerlink" title="忆王孙"></a>忆王孙</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">西风一夜剪芭蕉，倦眼经秋耐寂寥？强把心情付浊醪。读离骚。愁似湘江日夜潮。</span><br><span class="line"></span><br><span class="line">浊醪（láo）：即浊酒。</span><br><span class="line">芳菲：代指花朵。</span><br></pre></td></tr></table></figure><h3 id="译文-2"><a href="#译文-2" class="headerlink" title="译文"></a>译文</h3><p>昨天晚上刮了一夜西风，今天起来一看，芭蕉都凋残了。在这萧瑟的清秋，满眼的芳菲消歇，怎能不备感寂寞寥落？一壶浊酒固然可以勉强浇愁、暂时解忧。然而这愁情似江潮般滚滚而来且绵绵不绝，酒又岂能解怀，唯有用读《离骚》来抒发愁思了。</p><h3 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h3><p>清朝三藩之乱（1673—1681年）期间，一向文质彬彬的纳兰性德居然请求到前线去冲锋陷阵，立志报国，结果是一而再再而三去上疏，都被康熙帝驳了回来。当时，朝廷和吴三桂的兵马正处于对峙中，西线战场上，清军处于守势。康熙舍不得将纳兰送到前线送死，有更重要的任命。纳兰这边，反应是失望。据考证，这首《忆王孙》就是纳兰上疏不成后写的。</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外婆的道歉信</title>
      <link href="/2018/09/05/books/to-the-monkey-and-the-frog-%E5%A4%96%E5%A9%86%E7%9A%84%E9%81%93%E6%AD%89%E4%BF%A1/"/>
      <url>/2018/09/05/books/to-the-monkey-and-the-frog-%E5%A4%96%E5%A9%86%E7%9A%84%E9%81%93%E6%AD%89%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<ul><li>每个七岁的小孩都应该拥有一位超级英雄。<ul><li>“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。”</li></ul></li><li>不是所有的怪物一开始都是怪物。有些因为悲伤才变成了怪物。<ul><li>威力巨大的海浪，打得满世界都是玻璃碎片。</li><li>喝红酒的母亲，失去了两个男孩和男孩父亲的母亲。</li></ul></li><li>超乎寻常的悲剧造就非同一般的英雄</li></ul>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书打卡</title>
      <link href="/2018/09/02/books/%E2%86%92/"/>
      <url>/2018/09/02/books/%E2%86%92/</url>
      
        <content type="html"><![CDATA[<ul><li>-&gt;<ul><li>不著一字，尽得风流</li><li>刚看完的时候一脸懵逼， 看了别人的书评，真心佩服。<a href="https://book.douban.com/review/8540349/">真正的英雄主义</a></li></ul></li></ul><p>加缪说：“人是唯一拒绝其现状的生物。”如果从宏观角度以此审视人类的艺术，似乎可以这样理解：艺术就是这种拒绝的衍生物。虽然在形式上艺术有着庞杂的类别，无论是小说、音乐、雕塑、绘画还是电影，究其本质，无一不在映射着一种试图对自身现状的剥离，而受众追求的则是一种通感和共鸣，在那一刻，忘记“我”为何物，实现完全精神化的升华。这也决定着不管表现形式如何，顶尖的艺术品一定拥有着共通的精华，仿佛人类思想的极致往往总是指向同一个地方。</p><p>如此，也许可以理解马克-安托万•马修何以特立独行地将漫画这种艺术形式“逼迫”至极限。马克自然可以代表欧洲漫画界的最高成就，而我们却仍然处在逐渐熟悉他的过程，记得去年马克的《画的秘密》在圈子里异常火爆，人们不由发出迟来的感慨：原来漫画还可以这样画。马克从未将自己视作哲学家，但他的作品显然将漫画的传统定义进行了深刻的颠覆，马克的漫画更像是一种符号学意义上的载体，承载着在我们看来似乎不应该由漫画承载的主题，今年引进的《方向》更是如此。</p><p>《方向》延续了马克一贯的风格，但这次显然要更加坚决和彻底。马克彻底抛开了文字的障碍，全书没有出现一个字，以至原作标题也只是一个“→”的符号。马克也站在了绘画的边缘，这是一本由各种不同大小的、二维的、三维的箭头组成的书，一切都是由箭头搭建，除了主人公外再无其他任何人物，甚至主人公也被完全虚化，成为看不清面貌，大脑和身体充满箭头的某种“综合体”。在这样的情况下，《方向》的整体故事是被高度抽象化的，马克摒弃了故事的传统核心（即冲突），主人公只是随着各种箭头从一页跋涉至另一页，仿佛陷入一种无尽的符号化过程之中。</p><p>但这并不意味着《方向》仅剩一堆无法破译的符号，成为了一本完全版画式的漫画。恰恰相反，马克让《方向》走向了另一个极致，他用隐喻化和象征性的手法将这本貌似故事极简的漫画，升华为一种抒发深刻思索的哲思类作品。主人公是一位穿风衣、戴礼帽、衬衣最上面的扣子依然要扣紧的中年男子，马克对其的设定是完全的去个性化的，之所以连容貌也不进行刻画，就是要塑造这样一个与大众完全“融合”的符号，这个人物代表着最普通的上班族，甚至就是你我的影子。从全书最初一片漆黑中那个小小的箭头状的光点开始，这种隐喻和象征就同步开始了，那个小小的箭头状的光点原来是一堵门上的钥匙孔，主人公从钥匙孔向外望去是一片虚无。这种门内的黑暗完全可以看做是人在出生前所处的母体子宫，外面的世界是未知和光明。这里有一个小细节需要注意，就是当主人公从门内走出的时候，门自动关上了，主人公一惊，但显然没有回身的意思，全书正式开始。这是符合我们这种象征推测的细节，因为人来到这个世界，就无法回到原处了。</p><p>卡夫卡在《城堡》中设置了同样一个符号化的主人公——K，这是一个连名字都只是字母代号的人物，也同样讲述了一个极为简单的故事，K应聘来城堡当土地测量员，他经过长途跋涉，穿过许多雪路，终于在半夜抵达城堡管辖下的一个穷村落，却发现不管他用什么办法，城堡虽近在咫尺，但就是进不去，最终，K竟然至死也未能进入城堡。某种意义上，《方向》甚至可以说像是漫画版的《城堡》，主人公从那扇门走出之后，便开始了类似侦探一般的找寻之旅，因为那些指引他走出下一步的箭头变得越来越难以辨认。书中有一个很典型的桥段，主人公走到一堵无尽延伸的墙面前，在找到貌似一扇门的时候却仍然没有指示的箭头，这一刻，马克将主人公完全刻画成为了一个经验老道的侦探，最终主人公在门的横梁顶部找到指示的箭头，爬到墙上顺势走了下去……</p><p>然而，也正是从这个桥段开始，《方向》的主题渐渐浮出水面。主人公如此“漂亮”地找到指引前进的线索，完美地按照箭头指示的方向一路走下去，他顺着一个渐渐平缓的斜坡走下了这堵仿佛没有尽头的墙，来到了地面。在此处，马克运用了艺术的机巧，全书一下子转换为“上帝视角”，当人们从高空俯视的时候，才发现整堵墙其实组成了一个巨大的箭头轮廓，而主人公费尽心机和力气沿着墙上的箭头指示走向的，却是那个巨大箭头指示方向的反面。这是马克在全书中第一次完全的“上帝视角”，此前主人公曾在路途中被一个硬角绊倒，挖掘出一个巨大的物体，当时马克也转换了视角，使得人们看到这个物体实际上也是一个巨大的箭头，但主人公显然看不到全貌，于是在这个物体上找到了新的“线索”继续前进。但当时的这种“上帝视角”的转换还显得具有某种隐藏性，而这次，人们在完全的高空如上帝般俯视主人公与巨大箭头的“背道而驰”时，那种感受是极为震撼的。</p><p>这种震撼也是《方向》给人最突出的艺术感受，更确切地说是一种强烈的代入感后的共鸣。当主人公终于找到一本仿佛可以指引迷津的书时，这种代入感达到了巅峰，马克当时完全是按照第一视角引入了那个情节，更妙的是《方向》甚至加入一大张折叠的画页，读者是可以将其完全展开的，仿佛是我们找到了这样一本书，那一刻主人公和我们的界限被模糊了，正是这种代入感让前面提到的那种震撼进一步爆发，仿佛一种裂变，一直延续到全书结尾。人们不由想到自己，想到自己的生活，尘世中的每个人何尝不是像书中主人公一样，终其一生都在寻找指引方向的线索。当人们借由《方向》的“上帝视角”审视主人公的苦苦找寻和自以为是的判断，才发现其实“方向”只是我们的一厢情愿，一种对“意义”本身的荒诞感油然而生。那些貌似明确的箭头在全书的后半段也渐渐显露“真容”，那是每一颗组成荒漠的沙粒，那是每一座组成水泥森林的高台，那是干涸大地的裂纹，那是天空中偶尔现身的飞鸟，那是无数凡人终其一生的墓碑……</p><p>马克在书中用箭头组成一组密码，破译出来之后是这样一句法文：“荒诞只有在我们接受它的时候才有意义”。如果细细品味书中的设置，这更带着一种佛家“妙有”的味道，“有”本身只是“名相”，并非“实相”，其本身的存在是具有这种“荒诞性”的，不过是我们自心的映照而已，然而我们却找到各种理由去不断“验证”这种“荒诞”，甚至不惜用超自然的“神迹”进行“解释”。这一点在《方向》中尤为明显，每次主人公陷入找不到指引箭头的困境时，一些突然出现的现象仿佛“神迹”般出现，比如突然掉落的一块箭头指示牌，亦或巨石崩裂后内里出现的闪着光芒的箭头指针……人们在生活中又何尝不是这样，当适合二十来岁年纪的鸡汤开始让我们厌烦，我们会选择所谓“干货”，就像书中主人公侦探一般地找寻，而以“顺其自然”为核心的披着佛道外衣的另类肉汤则充斥着更大年龄段的朋友圈……这与《方向》的找寻过程是一致的，只是不管是马克的“荒诞”，还是佛家的“妙有”都对此是持否定态度的，那不是“天意”，只是我们的“我执”。</p><p>这样说来，《方向》的思想内核貌似是指向荒诞主义哲学，甚至虚无主义，至少应该是存在主义的题中之意。而《方向》的装饰封脊条的设计也很耐人寻味，正面是马克前面说的那句“荒诞只有在我们接受它的时候才有意义”，而背面则是加缪的名句“荒诞的意义就在于我们不赞同它”。这却是一个小小的陷阱，人们容易从字面意义上认为马克是在与加缪“针锋相对”，而事实却是这是深受存在主义哲学影响的马克向存在主义大师加缪最好的致敬。马克实际上在补充着，或者说诠释着加缪的那句话，如果说马克的话指出的是一种“妙有”，那么，加缪的话则直接指出了世界“真空”的实质。</p><p>这就涉及到《方向》在“荒诞”背后的意义延伸，就像学佛只知“妙有”或者“真空”都是不圆满的，所以才需要体（佛性）、相（色相）、用（妙用）三者合一。但如果将《方向》的这种“妙有”的意义直接指向加缪所认为的“真空”，显然是过于简单的，而这正是世人对荒诞主义哲学、虚无主义特别是存在主义最容易产生的误解。也正是在这个意义上，加缪一再否认自己是存在主义作家，加缪显然不满人们对存在主义虚无和荒诞“名相”的过分狂热。加缪关注的并不是荒诞的发现，而是其后果，荒诞不过是一个“已知数”，加缪从中推论出的后果是反抗、自由和激情。在加缪看来，意识到荒诞仅仅是一个初期阶段，有着这种“觉悟”的人应该为自己制定一条行为准则：义无反顾地生活，穷尽现有的一切，知道自己的局限而不为永恒徒费心力。因此，发现了荒诞，只能说明人的清醒，只有进行反抗，才能说明人真正地进入了生活。</p><p>人类的思想在极高处必将交汇融合。佛家“妙有真空”也并非要教化出一群虚无主义者，而是要以此为机缘发觉人们自心具足的佛性，用俗世的说法就是学会智慧地生活。从前憨山大师入定到兜率内院问弥勒菩萨：“什么是识？什么是智？”弥勒菩萨说：“分别是识，无分别是智；依识染，依智净；染有生死，净无诸佛”，六祖慧能大师更直接，劈柴担水做饭洗衣皆是修行。我们不认同充满着我执的“有”，但也莫要一口咬定一切就是荒诞的“空”，正如加缪的“荒诞的意义就在于我们不赞同它”并非完全的拒绝，因为真正理解加缪的人会补充上一句“荒诞只有在我们接受它的时候才有意义”，东方的“妙有真空”在这个节点真正与西哲的存在主义实现了某种交融。</p><p>也许很多人会提出异议，毕竟布鲁塞尔的专题画展介绍辞中是这样介绍《方向》的：“当代西西弗斯在荒诞的迷宫里随着存在中的偶然不断游走”。人们也自然会举出加缪的《西西弗斯神话》作为例证，认为《方向》绝非指向了一个积极光明的主题，甚至书中有一处还直接出现了一个山脚下由线团组成的球体，让人不能不产生“西西弗斯和巨石”的悲剧（西西弗斯被诸神判处把一块巨石不断推上山顶，而石头因其重量一次又一次滚落）。然而，在加缪的笔下，西西弗斯其实是存在主义的英雄：西西弗斯对自己荒诞的处境有着准确认识，但他认为没有蔑视征服不了的命运，无能为力却要叛逆反抗，他对荒诞的命运说“是”，但他对荒诞的精神状态说“不”，于是他孜孜以求，努力不懈，这就是他的反抗方式。加缪不止一次提到，幸福和荒诞是同一方土地的两个儿子，不可分开，没有不带阴影的阳光，必须认识黑夜。西西弗斯因为对荒诞的洞悉和反抗，所以他活得清醒，活得充实，加缪也曾说应当想象西西弗斯是幸福的。</p><p>《方向》的最后，主人公在不断的无用找寻中已然老去，最终他发现自己的影子竟然也是一个箭头，他颓然坐在地上，最终垂下了衰老的头颅，就像死去一般，仿佛一个被命运戏耍够了的小丑临终时对自己一生的叹息，全书在此颇有些电影尾声的味道，马克恢复“上帝视角”，人们像一架舍主人公而去的直升机在不断爬升，越飞越高……人们由此对《方向》主题的最终走向进行悲观的判断貌似是完全符合逻辑的，马克实在大才，这种切肤的代入感和对“意义”本身的否定给人的印象确实过于深刻。然而，这里有一个容易忽视的小细节必须指出，这个细节虽然微小，却是大才马克的“鬼才之笔”，让笔者不得不佩服马克的才气尤其是他的胆量和超脱。因为，这个小细节将直接决定着全书会指向两个截然相反的结局，马克仿佛一个富有而随意的赌徒，就这样洒脱地将一切都压在了这个小细节上。</p><p>如果我们仔细去观察那个坐在地上、渐渐变小的主人公，我们会发现这个具有决定意义的细节：主人公最后是抬起头的。因为，之前主人公是一种大幅度低垂脑袋的状态，他的头垂得那样低，以至于我们能看到他的后颈完全裸露了出来，在接下来的画页中，如果其继续保持这种状态，那么在近乎九十度俯视的情况下，读者是仍然能看到主人公的后颈的。显然，主人公并未一直保持低头的状态，相反，他抬起了头，望向了自己箭头指向的前方，这才是全书的真正高潮，这才是马克创作《方向》的真实目的。如果主人公就那样充满着叹息甚至懊恼地死去，何来“荒诞只有在我们接受它的时候才有意义”一说？这与马克一直以来对加缪的推崇也是极为不符的，一个真正了解过加缪思想的人会知道面对荒诞，加缪最终给出的是“我的反抗，我的自由和我的激情。”</p><p>虽然仅仅是最后极为隐秘的一刹，但全书的主题和意义完全反转了，这是极为高明的艺术手法，更是一位真正的艺术家最终实践自身思想的大胆和洒脱。读者如果错过这个细节，也许会将整本书的意图误读，但对马克来说已经无所谓了，既然我们终究只能在自身的存在层面找回意义，那么艺术家创作的过程自然要高于文本受众的理解和评价。这实在有点儿像领悟“妙有真空”之后的一种坦然和随喜，就像书中的主人公，当他终于明白自身即是方向时，在以后的生命中，哪怕他已衰老，哪怕已经时日无多，但他最终超越了荒诞，找到了荒诞背后的另一种可能，一切都不再纠结和焦灼。</p><p>这也正是《方向》最终的意义所在，我们只是芸芸众生中的一粒微尘，每天挤在格子间或是地铁公交里，日常生活的机械性使我们终将对自己存在的价值和目的产生怀疑，继而会面对那种貌似无法排解的荒诞感。然而，我们仍有理由相信这荒诞背后的另一种可能：既然如此，何不放开一点点，何不自我一点点，不再惶恐、不再焦虑、不再愤恨、不再轻佻，我的日常就是我的生活，我的生活就是我的意义，我的意义就是我最终的方向，这是体悟“真空”之后的“妙有”，更是领悟“妙有”后对“真空”的最好解读。</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那么慢，那么美</title>
      <link href="/2018/09/01/books/so-slow-so-beautiful/"/>
      <url>/2018/09/01/books/so-slow-so-beautiful/</url>
      
        <content type="html"><![CDATA[<p><strong>立个flag，用北欧人平均读书速率（一年24本）读书</strong></p><p>拆的第一本书就这么有意思的么</p><div class="fj-gallery"><p><img src="/./img/books/first-book.jpeg" alt="flag之后的第一本书"><br><img src="/./img/books/green-hard.jpeg" alt="小绿说做人好难啊"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抄的是句子，品的是人生</title>
      <link href="/2018/08/07/books/2018-8-29/"/>
      <url>/2018/08/07/books/2018-8-29/</url>
      
        <content type="html"><![CDATA[<ul><li>像艺术家一样思考<ul><li>花费时间，花费生命做的事，都称得上艺术。<ul><li>一本序和前言占了十分之一的书</li><li>killing time is killing yourself.</li></ul></li></ul></li></ul><div class="fj-gallery"><p><img src="/./img/books/love-u-love-me.jpeg" alt="爱你就像爱自己扉页"></p>          </div><h2 id="孤独"><a href="#孤独" class="headerlink" title="孤独"></a>孤独</h2><p>8.7</p><p><strong>孤独这两个字拆开来看，有孩童，有瓜果，有走兽，有飞虫，足以撑起一个盛夏傍晚的巷口，人情味十足。稚儿擎瓜柳棚下，细犬逐蝶窄巷中。人间繁华多笑语，惟我空余两鬓风。——孩童走兽飞虫自然热闹，可那都和你无关，这就叫孤独。</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年轻时</span><br><span class="line">道理都是天书</span><br><span class="line">识得其形，却不知其意</span><br><span class="line">年迈时</span><br><span class="line">半句话刺痛泪腺</span><br><span class="line">勾起往昔，却难以回首</span><br><span class="line">当下</span><br><span class="line">前方如雾</span><br><span class="line">光劈不散</span><br><span class="line">雨吹不开</span><br><span class="line">如梦</span><br><span class="line">只盼梦醒仍携忆来生</span><br></pre></td></tr></table></figure><p>今天喜欢上一首歌：崔子格的<code>有生之年再也不见</code></p><p>todo: 添加背景音乐</p><h2 id="颜如晶"><a href="#颜如晶" class="headerlink" title="颜如晶"></a>颜如晶</h2><p>8.24</p><ul><li>人总是会变的，不变的人需要很多人的付出来保护。</li><li>如果你跟周围所有的人在一起都觉得是在将就，围绕着你的都是苍蝇，这时候你有没有怀疑自己是一坨屎？</li><li>人生遇到瓶颈时，上进心是最大的煎熬。</li><li>你以为大肠里包的都是小肠么？大肠里包的是屎。其实真正的伤害在于知道。</li></ul><h2 id="so-slow-so-beautiful"><a href="#so-slow-so-beautiful" class="headerlink" title="so slow so beautiful"></a>so slow so beautiful</h2><p>8.30</p><blockquote><p>《那么慢，那么美》我不在乎他夸北欧是真的还是假的，我愿意把他当作真的，好让自己心有向往，更积极</p></blockquote><ul><li>个人信誉之道盛行</li><li>看书之风盛行，一个人的社交<ul><li>即使不与人交往，沉浸在阅读里的时光，那是沉寂的时间之中另一段生命繁华投下的光阴。</li><li>之前特别不明白有些人为什么喜欢在咖啡店看书。咖啡店读书的意思在于，在热闹的场合干自己的事，不为交友，不为赶热闹，就为在人群中的一份存在感。</li></ul></li><li>轻物质，重思想</li><li>节俭</li><li>游刃有余，特立独行，凡事有度</li><li>工作与享受生活并驾齐驱</li><li>在香水的味道中睡去，从咖啡的香味中醒来</li><li>所有的有条不紊和慢而有序都蕴含在计划之中</li><li>冒险人生的浪漫主义情怀</li><li>素质就是有本事创造生活并超越生活的修养与能力，人品的境界和能力的基石。</li><li>一个设计师只是为了一把椅子的一个转角，而亲手触摸过上千个鹅卵石的弧度。</li><li>做人的最高境界是节制。</li><li>生活是一种极致的体验</li><li>所以，终是开卷有益。即便不与人交往，沉浸在阅读里的时光，那是沉寂的时间之中，另一段生命繁华投下的光阴。</li><li>那么多的事想去做，那么多的想法要实现。想得到，就去争取，得不到，再去修炼。</li><li>每一个人都是从孩子长大。<ul><li>你不是天生就什么都会</li><li>你不是从来都不会犯任何错误。</li></ul></li></ul><h2 id="爱你就像爱生命读后感"><a href="#爱你就像爱生命读后感" class="headerlink" title="爱你就像爱生命读后感"></a>爱你就像爱生命读后感</h2><p>8.30</p><p>刚开始看这本书觉得特无聊特没意思，因为有点强迫症，就又拿起来继续看。换个角度，若是辞藻华丽，我反而有可能更看不下去呢。慢慢的，就越来越被其真诚感染。当然，对于我这种浮躁的人来说，这个被打动的过程非常的缓慢。</p><ul><li>你要是愿意，我就永远爱你，你要不愿意，我就永远相思。</li><li>你要是喜欢了别人我会哭，但是还是喜欢你。</li><li>什么事你先别哭，先来责备我，好吗？</li><li>不一定你要爱我，但是我爱你，这是我的命运。</li><li>单单你的名字就够我爱一世的了。</li><li>你回来时我准比上次还爱你呢。</li><li>哪怕美好的一切消失，咱们先来让它存在。</li></ul><p>觉得王小波对李银河的感觉过于热烈执着，有点梦幻色彩。不知道他们之后的感情经历。可能就像他自己说的，“不管我本人多么平庸，我总觉得对你的爱很美。”</p><p>不过就这一段而言，我是很愿意去相信的，但是又控制不住的不相信。觉得这种痴心般的感情不可能会长久，可能我还是不愿意，或者说不敢相信感情。不是说爱情，是说感情。感情这个东西是断断续续的，是一个一个瞬发的过程，不是连续的。总会有各种各样的原因，减少或者加大瞬发的间隔。所以感情才存在想买把手枪打死你，结果却买回了你最爱吃的点心；说出的海誓山盟，结果却是过眼云烟，最后都变成一句“爱过”。</p><p>之前一直不喜欢在爱情中说对不起和谢谢。后来就觉得没什么了，才知道并不是只有自己才这样。很多人都是这样的呢</p><p>爱情是否应该不猜忌，不埋怨，毫无保留，哪怕厌倦，烦闷，平淡，没有新鲜感。经历了几次之后还是不明白这个问题，我的答案是什么。</p><hr><p>在一起二十年，竟从未有过沉闷厌倦的感觉。始终如一，令人赞服。</p><h2 id="绿毛水怪"><a href="#绿毛水怪" class="headerlink" title="绿毛水怪"></a>绿毛水怪</h2><p>大团的蒲公英浮在街道的河流上，吞吐着柔软的针一样的光。我们好像在池塘的水底。从一个月亮走向另一个月亮。</p><p>读后感：</p><blockquote><p>悲剧总比喜剧蚀骨，所以人们才天真的以为不如意事常八九。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Overtime Is Killing You… Slowly</title>
      <link href="/2018/07/24/tattle/2018-7-24/"/>
      <url>/2018/07/24/tattle/2018-7-24/</url>
      
        <content type="html"><![CDATA[<h1 id="Overtime-Is-Killing-You…-Slowly"><a href="#Overtime-Is-Killing-You…-Slowly" class="headerlink" title="Overtime Is Killing You… Slowly"></a><a href="https://ilikekillnerds.com/2014/10/overtime-is-killing-you-slowly/">Overtime Is Killing You… Slowly</a></h1><p>If you work in the tech industry, more specifically as a developer (software or web) you are slowly dying from a disease commonly known as: overtime.</p><p>There is no cure for overtime other than something called common sense. It comes in many different forms, but for many including myself, it can be a hard pill to swallow when a deadline is looming or a culture of overtime is prevalent. When the company comes to expect overtime, in this economy you have two choices: deal with it and hope you do not burn out or find a new job.</p><p>Finding a new job for some can be difficult, a lot of the individual economies that make up the world economy are falling apart. Spain has an unemployment rate of around 25%, the UK around 6.5%. This leaves you with the choice of working incredibly long hours for a fixed salary with no extra benefits, which for some with families to provide for can make it even harder to deal with.</p><p>Does any of this sound familiar?</p><ul><li>But I have to stay back to finish this deadline or I will lose my job.</li><li>I want to deliver great code, so I can warrant the extra time investment.</li><li>I am new here and I want to make a good impression, be a team player and I know if the company needs to downsize because I am new, they will look to cull me first.</li><li>Work said that this will not happen very often. I am only staying back for the greater good of my team and my company, it will not happen very often.</li><li>We want to get this project completed earlier, so we have time at the end for testing and refinements before handing it over to the client or shipping,</li></ul><p>In the end you have to ask yourself: who does overtime truly benefit?</p><p>It does not benefit you or your team because it has been proven that after a certain amount of hours staring at a computer screen, you begin to lose focus and once you lose focus, your concentration levels go right down the toilet.</p><p>You are definitely not doing your employer any favours either. Dropped concentration levels mean you miss things, you make simple mistakes and could end up setting you and your teams progress back as you scramble to undo mistakes you made whilst fatigued. Resentment begins to grow in environments where work life balance becomes 90&#x2F;10.</p><p>So the answer to the question is: it benefits nobody. It is an outdated way of thinking that the more man hours you throw at a problem, the quicker it gets solved. This is akin to slavery, and like many overworked slaves in history, it takes a toll on you and you either die or become mentally ill.</p><p>Many managers seem to operate on the principle of the more hours someone puts in, the more work you get out. This is true until a certain point. It is a little bit like dipping a tea bag in a cup of hot water, after 3 to 5 minutes of steeping in the water, it will not absorb any more tea. You could leave the tea bag in for 2 hours and it would still be no stronger than someone who left theirs in for 5 minutes.</p><p>Overtime is not just limited to sitting at your work provided desk on your work provided computer, it also extends to home-life. Working from home after hours, checking emails and losing valuable time you can spend with your family is a form of overtime we all fail to realise is just as detrimental to your health and work&#x2F;life balance.</p><p>Go home, hug your wife&#x2F;husband, play with your kids, see a movie, call your parents or reach out to that high-school friend you used to be great friends with and stop letting overtime kill you. You are sick, but there is hope for you yet.</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
